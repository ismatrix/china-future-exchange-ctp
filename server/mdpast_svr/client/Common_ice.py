# **********************************************************************
#
# Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.2
#
# <auto-generated>
#
# Generated from file `Common.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy

# Start of module CM
_M_CM = Ice.openModule('CM')
__name__ = 'CM'

if 'Ticker' not in _M_CM.__dict__:
    _M_CM.Ticker = Ice.createTempClass()
    class Ticker(object):
        def __init__(self, Timestamp=0, Price=0.0, Volume=0, Turnover=0.0, OpenInterest=0.0, TotalVolume=0.0, TotalTurnover=0.0, BidPrice1=0.0, AskPrice1=0.0, BidVolume1=0, AskVolume1=0):
            self.Timestamp = Timestamp
            self.Price = Price
            self.Volume = Volume
            self.Turnover = Turnover
            self.OpenInterest = OpenInterest
            self.TotalVolume = TotalVolume
            self.TotalTurnover = TotalTurnover
            self.BidPrice1 = BidPrice1
            self.AskPrice1 = AskPrice1
            self.BidVolume1 = BidVolume1
            self.AskVolume1 = AskVolume1

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_CM.Ticker):
                return NotImplemented
            else:
                if self.Timestamp != other.Timestamp:
                    return False
                if self.Price != other.Price:
                    return False
                if self.Volume != other.Volume:
                    return False
                if self.Turnover != other.Turnover:
                    return False
                if self.OpenInterest != other.OpenInterest:
                    return False
                if self.TotalVolume != other.TotalVolume:
                    return False
                if self.TotalTurnover != other.TotalTurnover:
                    return False
                if self.BidPrice1 != other.BidPrice1:
                    return False
                if self.AskPrice1 != other.AskPrice1:
                    return False
                if self.BidVolume1 != other.BidVolume1:
                    return False
                if self.AskVolume1 != other.AskVolume1:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_CM._t_Ticker)

        __repr__ = __str__

    _M_CM._t_Ticker = IcePy.defineStruct('::CM::Ticker', Ticker, (), (
        ('Timestamp', (), IcePy._t_long),
        ('Price', (), IcePy._t_double),
        ('Volume', (), IcePy._t_int),
        ('Turnover', (), IcePy._t_double),
        ('OpenInterest', (), IcePy._t_double),
        ('TotalVolume', (), IcePy._t_double),
        ('TotalTurnover', (), IcePy._t_double),
        ('BidPrice1', (), IcePy._t_double),
        ('AskPrice1', (), IcePy._t_double),
        ('BidVolume1', (), IcePy._t_int),
        ('AskVolume1', (), IcePy._t_int)
    ))

    _M_CM.Ticker = Ticker
    del Ticker

if 'Bar' not in _M_CM.__dict__:
    _M_CM.Bar = Ice.createTempClass()
    class Bar(object):
        def __init__(self, Timestamp=0, High=0.0, Low=0.0, Open=0.0, Close=0.0, Volume=0, Turnover=0.0, OpenInterest=0.0):
            self.Timestamp = Timestamp
            self.High = High
            self.Low = Low
            self.Open = Open
            self.Close = Close
            self.Volume = Volume
            self.Turnover = Turnover
            self.OpenInterest = OpenInterest

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_CM.Bar):
                return NotImplemented
            else:
                if self.Timestamp != other.Timestamp:
                    return False
                if self.High != other.High:
                    return False
                if self.Low != other.Low:
                    return False
                if self.Open != other.Open:
                    return False
                if self.Close != other.Close:
                    return False
                if self.Volume != other.Volume:
                    return False
                if self.Turnover != other.Turnover:
                    return False
                if self.OpenInterest != other.OpenInterest:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_CM._t_Bar)

        __repr__ = __str__

    _M_CM._t_Bar = IcePy.defineStruct('::CM::Bar', Bar, (), (
        ('Timestamp', (), IcePy._t_long),
        ('High', (), IcePy._t_double),
        ('Low', (), IcePy._t_double),
        ('Open', (), IcePy._t_double),
        ('Close', (), IcePy._t_double),
        ('Volume', (), IcePy._t_int),
        ('Turnover', (), IcePy._t_double),
        ('OpenInterest', (), IcePy._t_double)
    ))

    _M_CM.Bar = Bar
    del Bar

if 'DayBar' not in _M_CM.__dict__:
    _M_CM.DayBar = Ice.createTempClass()
    class DayBar(object):
        def __init__(self, Timestamp=0, High=0.0, Low=0.0, Open=0.0, Close=0.0, Average=0.0, Volume=0, Turnover=0.0, Settlement=0.0, OpenInterest=0.0, PreSettlement=0.0, PreClose=0.0, PreoOpenInterest=0.0, Price=0.0, UpperLimit=0.0, LowerLimit=0.0):
            self.Timestamp = Timestamp
            self.High = High
            self.Low = Low
            self.Open = Open
            self.Close = Close
            self.Average = Average
            self.Volume = Volume
            self.Turnover = Turnover
            self.Settlement = Settlement
            self.OpenInterest = OpenInterest
            self.PreSettlement = PreSettlement
            self.PreClose = PreClose
            self.PreoOpenInterest = PreoOpenInterest
            self.Price = Price
            self.UpperLimit = UpperLimit
            self.LowerLimit = LowerLimit

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_CM.DayBar):
                return NotImplemented
            else:
                if self.Timestamp != other.Timestamp:
                    return False
                if self.High != other.High:
                    return False
                if self.Low != other.Low:
                    return False
                if self.Open != other.Open:
                    return False
                if self.Close != other.Close:
                    return False
                if self.Average != other.Average:
                    return False
                if self.Volume != other.Volume:
                    return False
                if self.Turnover != other.Turnover:
                    return False
                if self.Settlement != other.Settlement:
                    return False
                if self.OpenInterest != other.OpenInterest:
                    return False
                if self.PreSettlement != other.PreSettlement:
                    return False
                if self.PreClose != other.PreClose:
                    return False
                if self.PreoOpenInterest != other.PreoOpenInterest:
                    return False
                if self.Price != other.Price:
                    return False
                if self.UpperLimit != other.UpperLimit:
                    return False
                if self.LowerLimit != other.LowerLimit:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_CM._t_DayBar)

        __repr__ = __str__

    _M_CM._t_DayBar = IcePy.defineStruct('::CM::DayBar', DayBar, (), (
        ('Timestamp', (), IcePy._t_long),
        ('High', (), IcePy._t_double),
        ('Low', (), IcePy._t_double),
        ('Open', (), IcePy._t_double),
        ('Close', (), IcePy._t_double),
        ('Average', (), IcePy._t_double),
        ('Volume', (), IcePy._t_int),
        ('Turnover', (), IcePy._t_double),
        ('Settlement', (), IcePy._t_double),
        ('OpenInterest', (), IcePy._t_double),
        ('PreSettlement', (), IcePy._t_double),
        ('PreClose', (), IcePy._t_double),
        ('PreoOpenInterest', (), IcePy._t_double),
        ('Price', (), IcePy._t_double),
        ('UpperLimit', (), IcePy._t_double),
        ('LowerLimit', (), IcePy._t_double)
    ))

    _M_CM.DayBar = DayBar
    del DayBar

if 'Account' not in _M_CM.__dict__:
    _M_CM.Account = Ice.createTempClass()
    class Account(object):
        def __init__(self, tradingday='', fundid='', parentid='', prebalance=0.0, premargin=0.0, requestid='', balance=0.0, available=0.0, margin=0.0, incap=0.0, outcap=0.0, commission=0.0, closeprofit=0.0, positionprofit=0.0, updatedate=''):
            self.tradingday = tradingday
            self.fundid = fundid
            self.parentid = parentid
            self.prebalance = prebalance
            self.premargin = premargin
            self.requestid = requestid
            self.balance = balance
            self.available = available
            self.margin = margin
            self.incap = incap
            self.outcap = outcap
            self.commission = commission
            self.closeprofit = closeprofit
            self.positionprofit = positionprofit
            self.updatedate = updatedate

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_CM.Account):
                return NotImplemented
            else:
                if self.tradingday != other.tradingday:
                    return False
                if self.fundid != other.fundid:
                    return False
                if self.parentid != other.parentid:
                    return False
                if self.prebalance != other.prebalance:
                    return False
                if self.premargin != other.premargin:
                    return False
                if self.requestid != other.requestid:
                    return False
                if self.balance != other.balance:
                    return False
                if self.available != other.available:
                    return False
                if self.margin != other.margin:
                    return False
                if self.incap != other.incap:
                    return False
                if self.outcap != other.outcap:
                    return False
                if self.commission != other.commission:
                    return False
                if self.closeprofit != other.closeprofit:
                    return False
                if self.positionprofit != other.positionprofit:
                    return False
                if self.updatedate != other.updatedate:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_CM._t_Account)

        __repr__ = __str__

    _M_CM._t_Account = IcePy.defineStruct('::CM::Account', Account, (), (
        ('tradingday', (), IcePy._t_string),
        ('fundid', (), IcePy._t_string),
        ('parentid', (), IcePy._t_string),
        ('prebalance', (), IcePy._t_double),
        ('premargin', (), IcePy._t_double),
        ('requestid', (), IcePy._t_string),
        ('balance', (), IcePy._t_double),
        ('available', (), IcePy._t_double),
        ('margin', (), IcePy._t_double),
        ('incap', (), IcePy._t_double),
        ('outcap', (), IcePy._t_double),
        ('commission', (), IcePy._t_double),
        ('closeprofit', (), IcePy._t_double),
        ('positionprofit', (), IcePy._t_double),
        ('updatedate', (), IcePy._t_string)
    ))

    _M_CM.Account = Account
    del Account

if 'Position' not in _M_CM.__dict__:
    _M_CM.Position = Ice.createTempClass()
    class Position(object):
        def __init__(self, tradingday='', fundid='', requestid='', instrumentid='', direction='', hedgeflag='', preposition=0, preholdposition=0, position=0, openvolume=0, closevolume=0, openamount=0.0, closeamount=0.0, opencost=0.0, positioncost=0.0, premargin=0.0, margin=0.0, opencommission=0.0, closecommission=0.0, closeprofit=0.0, positionprofit=0.0, totalprofile=0.0, positiondate='', updatedate=''):
            self.tradingday = tradingday
            self.fundid = fundid
            self.requestid = requestid
            self.instrumentid = instrumentid
            self.direction = direction
            self.hedgeflag = hedgeflag
            self.preposition = preposition
            self.preholdposition = preholdposition
            self.position = position
            self.openvolume = openvolume
            self.closevolume = closevolume
            self.openamount = openamount
            self.closeamount = closeamount
            self.opencost = opencost
            self.positioncost = positioncost
            self.premargin = premargin
            self.margin = margin
            self.opencommission = opencommission
            self.closecommission = closecommission
            self.closeprofit = closeprofit
            self.positionprofit = positionprofit
            self.totalprofile = totalprofile
            self.positiondate = positiondate
            self.updatedate = updatedate

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_CM.Position):
                return NotImplemented
            else:
                if self.tradingday != other.tradingday:
                    return False
                if self.fundid != other.fundid:
                    return False
                if self.requestid != other.requestid:
                    return False
                if self.instrumentid != other.instrumentid:
                    return False
                if self.direction != other.direction:
                    return False
                if self.hedgeflag != other.hedgeflag:
                    return False
                if self.preposition != other.preposition:
                    return False
                if self.preholdposition != other.preholdposition:
                    return False
                if self.position != other.position:
                    return False
                if self.openvolume != other.openvolume:
                    return False
                if self.closevolume != other.closevolume:
                    return False
                if self.openamount != other.openamount:
                    return False
                if self.closeamount != other.closeamount:
                    return False
                if self.opencost != other.opencost:
                    return False
                if self.positioncost != other.positioncost:
                    return False
                if self.premargin != other.premargin:
                    return False
                if self.margin != other.margin:
                    return False
                if self.opencommission != other.opencommission:
                    return False
                if self.closecommission != other.closecommission:
                    return False
                if self.closeprofit != other.closeprofit:
                    return False
                if self.positionprofit != other.positionprofit:
                    return False
                if self.totalprofile != other.totalprofile:
                    return False
                if self.positiondate != other.positiondate:
                    return False
                if self.updatedate != other.updatedate:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_CM._t_Position)

        __repr__ = __str__

    _M_CM._t_Position = IcePy.defineStruct('::CM::Position', Position, (), (
        ('tradingday', (), IcePy._t_string),
        ('fundid', (), IcePy._t_string),
        ('requestid', (), IcePy._t_string),
        ('instrumentid', (), IcePy._t_string),
        ('direction', (), IcePy._t_string),
        ('hedgeflag', (), IcePy._t_string),
        ('preposition', (), IcePy._t_int),
        ('preholdposition', (), IcePy._t_int),
        ('position', (), IcePy._t_int),
        ('openvolume', (), IcePy._t_int),
        ('closevolume', (), IcePy._t_int),
        ('openamount', (), IcePy._t_double),
        ('closeamount', (), IcePy._t_double),
        ('opencost', (), IcePy._t_double),
        ('positioncost', (), IcePy._t_double),
        ('premargin', (), IcePy._t_double),
        ('margin', (), IcePy._t_double),
        ('opencommission', (), IcePy._t_double),
        ('closecommission', (), IcePy._t_double),
        ('closeprofit', (), IcePy._t_double),
        ('positionprofit', (), IcePy._t_double),
        ('totalprofile', (), IcePy._t_double),
        ('positiondate', (), IcePy._t_string),
        ('updatedate', (), IcePy._t_string)
    ))

    _M_CM.Position = Position
    del Position

if 'Done' not in _M_CM.__dict__:
    _M_CM.Done = Ice.createTempClass()
    class Done(object):
        def __init__(self, tradingday='', fundid='', requestid='', brokerid='', orderid='', tradeid='', exchangeid='', instrumentid='', direction='', offsetflag='', hedgeflag='', price=0.0, volume=0, tradedate='', tradetime='', updatedate='', parentid='', strategyid='', userid='', signalname=''):
            self.tradingday = tradingday
            self.fundid = fundid
            self.requestid = requestid
            self.brokerid = brokerid
            self.orderid = orderid
            self.tradeid = tradeid
            self.exchangeid = exchangeid
            self.instrumentid = instrumentid
            self.direction = direction
            self.offsetflag = offsetflag
            self.hedgeflag = hedgeflag
            self.price = price
            self.volume = volume
            self.tradedate = tradedate
            self.tradetime = tradetime
            self.updatedate = updatedate
            self.parentid = parentid
            self.strategyid = strategyid
            self.userid = userid
            self.signalname = signalname

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_CM.Done):
                return NotImplemented
            else:
                if self.tradingday != other.tradingday:
                    return False
                if self.fundid != other.fundid:
                    return False
                if self.requestid != other.requestid:
                    return False
                if self.brokerid != other.brokerid:
                    return False
                if self.orderid != other.orderid:
                    return False
                if self.tradeid != other.tradeid:
                    return False
                if self.exchangeid != other.exchangeid:
                    return False
                if self.instrumentid != other.instrumentid:
                    return False
                if self.direction != other.direction:
                    return False
                if self.offsetflag != other.offsetflag:
                    return False
                if self.hedgeflag != other.hedgeflag:
                    return False
                if self.price != other.price:
                    return False
                if self.volume != other.volume:
                    return False
                if self.tradedate != other.tradedate:
                    return False
                if self.tradetime != other.tradetime:
                    return False
                if self.updatedate != other.updatedate:
                    return False
                if self.parentid != other.parentid:
                    return False
                if self.strategyid != other.strategyid:
                    return False
                if self.userid != other.userid:
                    return False
                if self.signalname != other.signalname:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_CM._t_Done)

        __repr__ = __str__

    _M_CM._t_Done = IcePy.defineStruct('::CM::Done', Done, (), (
        ('tradingday', (), IcePy._t_string),
        ('fundid', (), IcePy._t_string),
        ('requestid', (), IcePy._t_string),
        ('brokerid', (), IcePy._t_string),
        ('orderid', (), IcePy._t_string),
        ('tradeid', (), IcePy._t_string),
        ('exchangeid', (), IcePy._t_string),
        ('instrumentid', (), IcePy._t_string),
        ('direction', (), IcePy._t_string),
        ('offsetflag', (), IcePy._t_string),
        ('hedgeflag', (), IcePy._t_string),
        ('price', (), IcePy._t_double),
        ('volume', (), IcePy._t_int),
        ('tradedate', (), IcePy._t_string),
        ('tradetime', (), IcePy._t_string),
        ('updatedate', (), IcePy._t_string),
        ('parentid', (), IcePy._t_string),
        ('strategyid', (), IcePy._t_string),
        ('userid', (), IcePy._t_string),
        ('signalname', (), IcePy._t_string)
    ))

    _M_CM.Done = Done
    del Done

if 'Order' not in _M_CM.__dict__:
    _M_CM.Order = Ice.createTempClass()
    class Order(object):
        def __init__(self, frontid='', sessionid='', privateno='', exchangeid='', orderid='', tradingday='', fundid='', brokerid='', requestid='', instrumentid='', direction='', offsetflag='', hedgeflag='', price=0.0, volume=0, ordertype='', orderstatus='', volumetraded=0, insertdatetime='', ordertime='', oerrno=0, oerrmsg='', updatetime='', parentid='', strategyid='', userid='', signalname=''):
            self.frontid = frontid
            self.sessionid = sessionid
            self.privateno = privateno
            self.exchangeid = exchangeid
            self.orderid = orderid
            self.tradingday = tradingday
            self.fundid = fundid
            self.brokerid = brokerid
            self.requestid = requestid
            self.instrumentid = instrumentid
            self.direction = direction
            self.offsetflag = offsetflag
            self.hedgeflag = hedgeflag
            self.price = price
            self.volume = volume
            self.ordertype = ordertype
            self.orderstatus = orderstatus
            self.volumetraded = volumetraded
            self.insertdatetime = insertdatetime
            self.ordertime = ordertime
            self.oerrno = oerrno
            self.oerrmsg = oerrmsg
            self.updatetime = updatetime
            self.parentid = parentid
            self.strategyid = strategyid
            self.userid = userid
            self.signalname = signalname

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_CM.Order):
                return NotImplemented
            else:
                if self.frontid != other.frontid:
                    return False
                if self.sessionid != other.sessionid:
                    return False
                if self.privateno != other.privateno:
                    return False
                if self.exchangeid != other.exchangeid:
                    return False
                if self.orderid != other.orderid:
                    return False
                if self.tradingday != other.tradingday:
                    return False
                if self.fundid != other.fundid:
                    return False
                if self.brokerid != other.brokerid:
                    return False
                if self.requestid != other.requestid:
                    return False
                if self.instrumentid != other.instrumentid:
                    return False
                if self.direction != other.direction:
                    return False
                if self.offsetflag != other.offsetflag:
                    return False
                if self.hedgeflag != other.hedgeflag:
                    return False
                if self.price != other.price:
                    return False
                if self.volume != other.volume:
                    return False
                if self.ordertype != other.ordertype:
                    return False
                if self.orderstatus != other.orderstatus:
                    return False
                if self.volumetraded != other.volumetraded:
                    return False
                if self.insertdatetime != other.insertdatetime:
                    return False
                if self.ordertime != other.ordertime:
                    return False
                if self.oerrno != other.oerrno:
                    return False
                if self.oerrmsg != other.oerrmsg:
                    return False
                if self.updatetime != other.updatetime:
                    return False
                if self.parentid != other.parentid:
                    return False
                if self.strategyid != other.strategyid:
                    return False
                if self.userid != other.userid:
                    return False
                if self.signalname != other.signalname:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_CM._t_Order)

        __repr__ = __str__

    _M_CM._t_Order = IcePy.defineStruct('::CM::Order', Order, (), (
        ('frontid', (), IcePy._t_string),
        ('sessionid', (), IcePy._t_string),
        ('privateno', (), IcePy._t_string),
        ('exchangeid', (), IcePy._t_string),
        ('orderid', (), IcePy._t_string),
        ('tradingday', (), IcePy._t_string),
        ('fundid', (), IcePy._t_string),
        ('brokerid', (), IcePy._t_string),
        ('requestid', (), IcePy._t_string),
        ('instrumentid', (), IcePy._t_string),
        ('direction', (), IcePy._t_string),
        ('offsetflag', (), IcePy._t_string),
        ('hedgeflag', (), IcePy._t_string),
        ('price', (), IcePy._t_double),
        ('volume', (), IcePy._t_int),
        ('ordertype', (), IcePy._t_string),
        ('orderstatus', (), IcePy._t_string),
        ('volumetraded', (), IcePy._t_int),
        ('insertdatetime', (), IcePy._t_string),
        ('ordertime', (), IcePy._t_string),
        ('oerrno', (), IcePy._t_int),
        ('oerrmsg', (), IcePy._t_string),
        ('updatetime', (), IcePy._t_string),
        ('parentid', (), IcePy._t_string),
        ('strategyid', (), IcePy._t_string),
        ('userid', (), IcePy._t_string),
        ('signalname', (), IcePy._t_string)
    ))

    _M_CM.Order = Order
    del Order

if 'DoOrder' not in _M_CM.__dict__:
    _M_CM.DoOrder = Ice.createTempClass()
    class DoOrder(object):
        def __init__(self, fundid='', exchangeid='', brokerid='', instrumentid='', ordertype='', direction='', offsetflag='', hedgeflag='', price=0.0, volume=0, donetype='', parentid='', strategyid='', userid='', signalname='', tradingday='', requestid=''):
            self.fundid = fundid
            self.exchangeid = exchangeid
            self.brokerid = brokerid
            self.instrumentid = instrumentid
            self.ordertype = ordertype
            self.direction = direction
            self.offsetflag = offsetflag
            self.hedgeflag = hedgeflag
            self.price = price
            self.volume = volume
            self.donetype = donetype
            self.parentid = parentid
            self.strategyid = strategyid
            self.userid = userid
            self.signalname = signalname
            self.tradingday = tradingday
            self.requestid = requestid

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_CM.DoOrder):
                return NotImplemented
            else:
                if self.fundid != other.fundid:
                    return False
                if self.exchangeid != other.exchangeid:
                    return False
                if self.brokerid != other.brokerid:
                    return False
                if self.instrumentid != other.instrumentid:
                    return False
                if self.ordertype != other.ordertype:
                    return False
                if self.direction != other.direction:
                    return False
                if self.offsetflag != other.offsetflag:
                    return False
                if self.hedgeflag != other.hedgeflag:
                    return False
                if self.price != other.price:
                    return False
                if self.volume != other.volume:
                    return False
                if self.donetype != other.donetype:
                    return False
                if self.parentid != other.parentid:
                    return False
                if self.strategyid != other.strategyid:
                    return False
                if self.userid != other.userid:
                    return False
                if self.signalname != other.signalname:
                    return False
                if self.tradingday != other.tradingday:
                    return False
                if self.requestid != other.requestid:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_CM._t_DoOrder)

        __repr__ = __str__

    _M_CM._t_DoOrder = IcePy.defineStruct('::CM::DoOrder', DoOrder, (), (
        ('fundid', (), IcePy._t_string),
        ('exchangeid', (), IcePy._t_string),
        ('brokerid', (), IcePy._t_string),
        ('instrumentid', (), IcePy._t_string),
        ('ordertype', (), IcePy._t_string),
        ('direction', (), IcePy._t_string),
        ('offsetflag', (), IcePy._t_string),
        ('hedgeflag', (), IcePy._t_string),
        ('price', (), IcePy._t_double),
        ('volume', (), IcePy._t_int),
        ('donetype', (), IcePy._t_string),
        ('parentid', (), IcePy._t_string),
        ('strategyid', (), IcePy._t_string),
        ('userid', (), IcePy._t_string),
        ('signalname', (), IcePy._t_string),
        ('tradingday', (), IcePy._t_string),
        ('requestid', (), IcePy._t_string)
    ))

    _M_CM.DoOrder = DoOrder
    del DoOrder

if '_t_DoneList' not in _M_CM.__dict__:
    _M_CM._t_DoneList = IcePy.defineSequence('::CM::DoneList', (), _M_CM._t_Done)

if '_t_AccountList' not in _M_CM.__dict__:
    _M_CM._t_AccountList = IcePy.defineSequence('::CM::AccountList', (), _M_CM._t_Account)

if '_t_PositionList' not in _M_CM.__dict__:
    _M_CM._t_PositionList = IcePy.defineSequence('::CM::PositionList', (), _M_CM._t_Position)

if '_t_OrderList' not in _M_CM.__dict__:
    _M_CM._t_OrderList = IcePy.defineSequence('::CM::OrderList', (), _M_CM._t_Order)

# End of module CM
