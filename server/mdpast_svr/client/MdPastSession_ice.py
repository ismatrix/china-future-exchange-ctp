# **********************************************************************
#
# Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.2
#
# <auto-generated>
#
# Generated from file `MdPastSession.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy
import Ice_Identity_ice
import Common_ice

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Included module CM
_M_CM = Ice.openModule('CM')

# Start of module MdPast
_M_MdPast = Ice.openModule('MdPast')
__name__ = 'MdPast'

if 'MdSessionCallBack' not in _M_MdPast.__dict__:
    _M_MdPast.MdSessionCallBack = Ice.createTempClass()
    class MdSessionCallBack(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_MdPast.MdSessionCallBack:
                raise RuntimeError('MdPast.MdSessionCallBack is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::MdPast::MdSessionCallBack')

        def ice_id(self, current=None):
            return '::MdPast::MdSessionCallBack'

        def ice_staticId():
            return '::MdPast::MdSessionCallBack'
        ice_staticId = staticmethod(ice_staticId)

        def onTick(self, TradingDay, InstrumentID, ticker, current=None):
			pass

        def onBar(self, TradingDay, InstrumentID, bar, current=None):
            pass

        def onDay(self, TradingDay, InstrumentID, day, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_MdPast._t_MdSessionCallBack)

        __repr__ = __str__

    _M_MdPast.MdSessionCallBackPrx = Ice.createTempClass()
    class MdSessionCallBackPrx(Ice.ObjectPrx):

        def onTick(self, TradingDay, InstrumentID, ticker, _ctx=None):
            return _M_MdPast.MdSessionCallBack._op_onTick.invoke(self, ((TradingDay, InstrumentID, ticker), _ctx))

        def begin_onTick(self, TradingDay, InstrumentID, ticker, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_MdPast.MdSessionCallBack._op_onTick.begin(self, ((TradingDay, InstrumentID, ticker), _response, _ex, _sent, _ctx))

        def end_onTick(self, _r):
            return _M_MdPast.MdSessionCallBack._op_onTick.end(self, _r)

        def onBar(self, TradingDay, InstrumentID, bar, _ctx=None):
            return _M_MdPast.MdSessionCallBack._op_onBar.invoke(self, ((TradingDay, InstrumentID, bar), _ctx))

        def begin_onBar(self, TradingDay, InstrumentID, bar, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_MdPast.MdSessionCallBack._op_onBar.begin(self, ((TradingDay, InstrumentID, bar), _response, _ex, _sent, _ctx))

        def end_onBar(self, _r):
            return _M_MdPast.MdSessionCallBack._op_onBar.end(self, _r)

        def onDay(self, TradingDay, InstrumentID, day, _ctx=None):
            return _M_MdPast.MdSessionCallBack._op_onDay.invoke(self, ((TradingDay, InstrumentID, day), _ctx))

        def begin_onDay(self, TradingDay, InstrumentID, day, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_MdPast.MdSessionCallBack._op_onDay.begin(self, ((TradingDay, InstrumentID, day), _response, _ex, _sent, _ctx))

        def end_onDay(self, _r):
            return _M_MdPast.MdSessionCallBack._op_onDay.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_MdPast.MdSessionCallBackPrx.ice_checkedCast(proxy, '::MdPast::MdSessionCallBack', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_MdPast.MdSessionCallBackPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::MdPast::MdSessionCallBack'
        ice_staticId = staticmethod(ice_staticId)

    _M_MdPast._t_MdSessionCallBackPrx = IcePy.defineProxy('::MdPast::MdSessionCallBack', MdSessionCallBackPrx)

    _M_MdPast._t_MdSessionCallBack = IcePy.defineClass('::MdPast::MdSessionCallBack', MdSessionCallBack, -1, (), True, False, None, (), ())
    MdSessionCallBack._ice_type = _M_MdPast._t_MdSessionCallBack

    MdSessionCallBack._op_onTick = IcePy.Operation('onTick', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), _M_CM._t_Ticker, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    MdSessionCallBack._op_onBar = IcePy.Operation('onBar', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), _M_CM._t_Bar, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    MdSessionCallBack._op_onDay = IcePy.Operation('onDay', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), _M_CM._t_DayBar, False, 0)), (), ((), IcePy._t_int, False, 0), ())

    _M_MdPast.MdSessionCallBack = MdSessionCallBack
    del MdSessionCallBack

    _M_MdPast.MdSessionCallBackPrx = MdSessionCallBackPrx
    del MdSessionCallBackPrx

if 'MdSession' not in _M_MdPast.__dict__:
    _M_MdPast.MdSession = Ice.createTempClass()
    class MdSession(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_MdPast.MdSession:
                raise RuntimeError('MdPast.MdSession is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::MdPast::MdSession')

        def ice_id(self, current=None):
            return '::MdPast::MdSession'

        def ice_staticId():
            return '::MdPast::MdSession'
        ice_staticId = staticmethod(ice_staticId)

        def queryData(self, ident, DataType, InstrumentID, starttime, endtime, current=None):
            pass

        def getLastTick(self, TradingDay, InstrumentID, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_MdPast._t_MdSession)

        __repr__ = __str__

    _M_MdPast.MdSessionPrx = Ice.createTempClass()
    class MdSessionPrx(Ice.ObjectPrx):

        def queryData(self, ident, DataType, InstrumentID, starttime, endtime, _ctx=None):
            return _M_MdPast.MdSession._op_queryData.invoke(self, ((ident, DataType, InstrumentID, starttime, endtime), _ctx))

        def begin_queryData(self, ident, DataType, InstrumentID, starttime, endtime, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_MdPast.MdSession._op_queryData.begin(self, ((ident, DataType, InstrumentID, starttime, endtime), _response, _ex, _sent, _ctx))

        def end_queryData(self, _r):
            return _M_MdPast.MdSession._op_queryData.end(self, _r)

        def getLastTick(self, TradingDay, InstrumentID, _ctx=None):
            return _M_MdPast.MdSession._op_getLastTick.invoke(self, ((TradingDay, InstrumentID), _ctx))

        def begin_getLastTick(self, TradingDay, InstrumentID, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_MdPast.MdSession._op_getLastTick.begin(self, ((TradingDay, InstrumentID), _response, _ex, _sent, _ctx))

        def end_getLastTick(self, _r):
            return _M_MdPast.MdSession._op_getLastTick.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_MdPast.MdSessionPrx.ice_checkedCast(proxy, '::MdPast::MdSession', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_MdPast.MdSessionPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::MdPast::MdSession'
        ice_staticId = staticmethod(ice_staticId)

    _M_MdPast._t_MdSessionPrx = IcePy.defineProxy('::MdPast::MdSession', MdSessionPrx)

    _M_MdPast._t_MdSession = IcePy.defineClass('::MdPast::MdSession', MdSession, -1, (), True, False, None, (), ())
    MdSession._ice_type = _M_MdPast._t_MdSession

    MdSession._op_queryData = IcePy.Operation('queryData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Ice._t_Identity, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    MdSession._op_getLastTick = IcePy.Operation('getLastTick', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), _M_CM._t_Ticker, False, 0), ())

    _M_MdPast.MdSession = MdSession
    del MdSession

    _M_MdPast.MdSessionPrx = MdSessionPrx
    del MdSessionPrx

# End of module MdPast
