// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.2
//
// <auto-generated>
//
// Generated from file `MdPastSession.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <MdPastSession.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __MdPast__MdSessionCallBack__onTick_name = "onTick";

const ::std::string __MdPast__MdSessionCallBack__onBar_name = "onBar";

const ::std::string __MdPast__MdSessionCallBack__onDay_name = "onDay";

const ::std::string __MdPast__MdSession__queryData_name = "queryData";

const ::std::string __MdPast__MdSession__queryInstruments_name = "queryInstruments";

}
::IceProxy::Ice::Object* ::IceProxy::MdPast::upCast(::IceProxy::MdPast::MdSessionCallBack* p) { return p; }

void
::IceProxy::MdPast::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::MdPast::MdSessionCallBack>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::MdPast::MdSessionCallBack;
        v->__copyFrom(proxy);
    }
}

::Ice::Int
IceProxy::MdPast::MdSessionCallBack::onTick(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Ticker& __p_ticker, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__MdPast__MdSessionCallBack__onTick_name);
    ::IceInternal::Outgoing __og(this, __MdPast__MdSessionCallBack__onTick_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_TradingDay);
        __os->write(__p_InstrumentID);
        __os->write(__p_ticker);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Int __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::MdPast::MdSessionCallBack::begin_onTick(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Ticker& __p_ticker, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__MdPast__MdSessionCallBack__onTick_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __MdPast__MdSessionCallBack__onTick_name, __del, __cookie);
    try
    {
        __result->prepare(__MdPast__MdSessionCallBack__onTick_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_TradingDay);
        __os->write(__p_InstrumentID);
        __os->write(__p_ticker);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::MdPast::MdSessionCallBack::__begin_onTick(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Ticker& __p_ticker, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::MdPast::MdSessionCallBackPrx __proxy = ::MdPast::MdSessionCallBackPrx::uncheckedCast(__result->getProxy());
            ::Ice::Int __ret;
            try
            {
                __ret = __proxy->end_onTick(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Int)> _response;
    };
    return begin_onTick(__p_TradingDay, __p_InstrumentID, __p_ticker, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Int
IceProxy::MdPast::MdSessionCallBack::end_onTick(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __MdPast__MdSessionCallBack__onTick_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Ice::Int
IceProxy::MdPast::MdSessionCallBack::onBar(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Bar& __p_bar, ::Ice::Int __p_period, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__MdPast__MdSessionCallBack__onBar_name);
    ::IceInternal::Outgoing __og(this, __MdPast__MdSessionCallBack__onBar_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_TradingDay);
        __os->write(__p_InstrumentID);
        __os->write(__p_bar);
        __os->write(__p_period);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Int __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::MdPast::MdSessionCallBack::begin_onBar(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Bar& __p_bar, ::Ice::Int __p_period, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__MdPast__MdSessionCallBack__onBar_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __MdPast__MdSessionCallBack__onBar_name, __del, __cookie);
    try
    {
        __result->prepare(__MdPast__MdSessionCallBack__onBar_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_TradingDay);
        __os->write(__p_InstrumentID);
        __os->write(__p_bar);
        __os->write(__p_period);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::MdPast::MdSessionCallBack::__begin_onBar(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Bar& __p_bar, ::Ice::Int __p_period, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::MdPast::MdSessionCallBackPrx __proxy = ::MdPast::MdSessionCallBackPrx::uncheckedCast(__result->getProxy());
            ::Ice::Int __ret;
            try
            {
                __ret = __proxy->end_onBar(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Int)> _response;
    };
    return begin_onBar(__p_TradingDay, __p_InstrumentID, __p_bar, __p_period, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Int
IceProxy::MdPast::MdSessionCallBack::end_onBar(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __MdPast__MdSessionCallBack__onBar_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Ice::Int
IceProxy::MdPast::MdSessionCallBack::onDay(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::DayBar& __p_day, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__MdPast__MdSessionCallBack__onDay_name);
    ::IceInternal::Outgoing __og(this, __MdPast__MdSessionCallBack__onDay_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_TradingDay);
        __os->write(__p_InstrumentID);
        __os->write(__p_day);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Int __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::MdPast::MdSessionCallBack::begin_onDay(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::DayBar& __p_day, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__MdPast__MdSessionCallBack__onDay_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __MdPast__MdSessionCallBack__onDay_name, __del, __cookie);
    try
    {
        __result->prepare(__MdPast__MdSessionCallBack__onDay_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_TradingDay);
        __os->write(__p_InstrumentID);
        __os->write(__p_day);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::MdPast::MdSessionCallBack::__begin_onDay(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::DayBar& __p_day, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::MdPast::MdSessionCallBackPrx __proxy = ::MdPast::MdSessionCallBackPrx::uncheckedCast(__result->getProxy());
            ::Ice::Int __ret;
            try
            {
                __ret = __proxy->end_onDay(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Int)> _response;
    };
    return begin_onDay(__p_TradingDay, __p_InstrumentID, __p_day, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Int
IceProxy::MdPast::MdSessionCallBack::end_onDay(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __MdPast__MdSessionCallBack__onDay_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

const ::std::string&
IceProxy::MdPast::MdSessionCallBack::ice_staticId()
{
    return ::MdPast::MdSessionCallBack::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::MdPast::MdSessionCallBack::__newInstance() const
{
    return new MdSessionCallBack;
}
::IceProxy::Ice::Object* ::IceProxy::MdPast::upCast(::IceProxy::MdPast::MdSession* p) { return p; }

void
::IceProxy::MdPast::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::MdPast::MdSession>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::MdPast::MdSession;
        v->__copyFrom(proxy);
    }
}

::std::string
IceProxy::MdPast::MdSession::queryData(const ::Ice::Identity& __p_ident, const ::std::string& __p_DataType, const ::std::string& __p_InstrumentID, const ::std::string& __p_starttime, const ::std::string& __p_endtime, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__MdPast__MdSession__queryData_name);
    ::IceInternal::Outgoing __og(this, __MdPast__MdSession__queryData_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_ident);
        __os->write(__p_DataType);
        __os->write(__p_InstrumentID);
        __os->write(__p_starttime);
        __os->write(__p_endtime);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::std::string __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::MdPast::MdSession::begin_queryData(const ::Ice::Identity& __p_ident, const ::std::string& __p_DataType, const ::std::string& __p_InstrumentID, const ::std::string& __p_starttime, const ::std::string& __p_endtime, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__MdPast__MdSession__queryData_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __MdPast__MdSession__queryData_name, __del, __cookie);
    try
    {
        __result->prepare(__MdPast__MdSession__queryData_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_ident);
        __os->write(__p_DataType);
        __os->write(__p_InstrumentID);
        __os->write(__p_starttime);
        __os->write(__p_endtime);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::MdPast::MdSession::__begin_queryData(const ::Ice::Identity& __p_ident, const ::std::string& __p_DataType, const ::std::string& __p_InstrumentID, const ::std::string& __p_starttime, const ::std::string& __p_endtime, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::MdPast::MdSessionPrx __proxy = ::MdPast::MdSessionPrx::uncheckedCast(__result->getProxy());
            ::std::string __ret;
            try
            {
                __ret = __proxy->end_queryData(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::std::string&)> _response;
    };
    return begin_queryData(__p_ident, __p_DataType, __p_InstrumentID, __p_starttime, __p_endtime, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::std::string
IceProxy::MdPast::MdSession::end_queryData(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __MdPast__MdSession__queryData_name);
    ::std::string __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::std::string
IceProxy::MdPast::MdSession::queryInstruments(const ::MdPast::StringList& __p_symbols, const ::MdPast::StringList& __p_products, const ::MdPast::StringList& __p_exchanges, const ::MdPast::IntList& __p_rank, const ::MdPast::StringList& __p_productclass, const ::MdPast::IntList& __p_istrading, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__MdPast__MdSession__queryInstruments_name);
    ::IceInternal::Outgoing __og(this, __MdPast__MdSession__queryInstruments_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_symbols);
        __os->write(__p_products);
        __os->write(__p_exchanges);
        __os->write(__p_rank);
        __os->write(__p_productclass);
        __os->write(__p_istrading);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::std::string __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::MdPast::MdSession::begin_queryInstruments(const ::MdPast::StringList& __p_symbols, const ::MdPast::StringList& __p_products, const ::MdPast::StringList& __p_exchanges, const ::MdPast::IntList& __p_rank, const ::MdPast::StringList& __p_productclass, const ::MdPast::IntList& __p_istrading, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__MdPast__MdSession__queryInstruments_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __MdPast__MdSession__queryInstruments_name, __del, __cookie);
    try
    {
        __result->prepare(__MdPast__MdSession__queryInstruments_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_symbols);
        __os->write(__p_products);
        __os->write(__p_exchanges);
        __os->write(__p_rank);
        __os->write(__p_productclass);
        __os->write(__p_istrading);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::MdPast::MdSession::__begin_queryInstruments(const ::MdPast::StringList& __p_symbols, const ::MdPast::StringList& __p_products, const ::MdPast::StringList& __p_exchanges, const ::MdPast::IntList& __p_rank, const ::MdPast::StringList& __p_productclass, const ::MdPast::IntList& __p_istrading, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::MdPast::MdSessionPrx __proxy = ::MdPast::MdSessionPrx::uncheckedCast(__result->getProxy());
            ::std::string __ret;
            try
            {
                __ret = __proxy->end_queryInstruments(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::std::string&)> _response;
    };
    return begin_queryInstruments(__p_symbols, __p_products, __p_exchanges, __p_rank, __p_productclass, __p_istrading, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::std::string
IceProxy::MdPast::MdSession::end_queryInstruments(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __MdPast__MdSession__queryInstruments_name);
    ::std::string __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

const ::std::string&
IceProxy::MdPast::MdSession::ice_staticId()
{
    return ::MdPast::MdSession::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::MdPast::MdSession::__newInstance() const
{
    return new MdSession;
}

::Ice::Object* MdPast::upCast(::MdPast::MdSessionCallBack* p) { return p; }

namespace
{
const ::std::string __MdPast__MdSessionCallBack_ids[2] =
{
    "::Ice::Object",
    "::MdPast::MdSessionCallBack"
};

}

bool
MdPast::MdSessionCallBack::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__MdPast__MdSessionCallBack_ids, __MdPast__MdSessionCallBack_ids + 2, _s);
}

::std::vector< ::std::string>
MdPast::MdSessionCallBack::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__MdPast__MdSessionCallBack_ids[0], &__MdPast__MdSessionCallBack_ids[2]);
}

const ::std::string&
MdPast::MdSessionCallBack::ice_id(const ::Ice::Current&) const
{
    return __MdPast__MdSessionCallBack_ids[1];
}

const ::std::string&
MdPast::MdSessionCallBack::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::MdPast::MdSessionCallBack";
    return typeId;
#else
    return __MdPast__MdSessionCallBack_ids[1];
#endif
}

::Ice::DispatchStatus
MdPast::MdSessionCallBack::___onTick(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_TradingDay;
    ::std::string __p_InstrumentID;
    ::CM::Ticker __p_ticker;
    __is->read(__p_TradingDay);
    __is->read(__p_InstrumentID);
    __is->read(__p_ticker);
    __inS.endReadParams();
    ::Ice::Int __ret = onTick(__p_TradingDay, __p_InstrumentID, __p_ticker, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
MdPast::MdSessionCallBack::___onBar(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_TradingDay;
    ::std::string __p_InstrumentID;
    ::CM::Bar __p_bar;
    ::Ice::Int __p_period;
    __is->read(__p_TradingDay);
    __is->read(__p_InstrumentID);
    __is->read(__p_bar);
    __is->read(__p_period);
    __inS.endReadParams();
    ::Ice::Int __ret = onBar(__p_TradingDay, __p_InstrumentID, __p_bar, __p_period, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
MdPast::MdSessionCallBack::___onDay(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_TradingDay;
    ::std::string __p_InstrumentID;
    ::CM::DayBar __p_day;
    __is->read(__p_TradingDay);
    __is->read(__p_InstrumentID);
    __is->read(__p_day);
    __inS.endReadParams();
    ::Ice::Int __ret = onDay(__p_TradingDay, __p_InstrumentID, __p_day, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __MdPast__MdSessionCallBack_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "onBar",
    "onDay",
    "onTick"
};

}

::Ice::DispatchStatus
MdPast::MdSessionCallBack::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__MdPast__MdSessionCallBack_all, __MdPast__MdSessionCallBack_all + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __MdPast__MdSessionCallBack_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___onBar(in, current);
        }
        case 5:
        {
            return ___onDay(in, current);
        }
        case 6:
        {
            return ___onTick(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
MdPast::MdSessionCallBack::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
MdPast::MdSessionCallBack::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
MdPast::__patch(MdSessionCallBackPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::MdPast::MdSessionCallBackPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::MdPast::MdSessionCallBack::ice_staticId(), v);
    }
}

::Ice::Object* MdPast::upCast(::MdPast::MdSession* p) { return p; }

namespace
{
const ::std::string __MdPast__MdSession_ids[2] =
{
    "::Ice::Object",
    "::MdPast::MdSession"
};

}

bool
MdPast::MdSession::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__MdPast__MdSession_ids, __MdPast__MdSession_ids + 2, _s);
}

::std::vector< ::std::string>
MdPast::MdSession::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__MdPast__MdSession_ids[0], &__MdPast__MdSession_ids[2]);
}

const ::std::string&
MdPast::MdSession::ice_id(const ::Ice::Current&) const
{
    return __MdPast__MdSession_ids[1];
}

const ::std::string&
MdPast::MdSession::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::MdPast::MdSession";
    return typeId;
#else
    return __MdPast__MdSession_ids[1];
#endif
}

::Ice::DispatchStatus
MdPast::MdSession::___queryData(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Identity __p_ident;
    ::std::string __p_DataType;
    ::std::string __p_InstrumentID;
    ::std::string __p_starttime;
    ::std::string __p_endtime;
    __is->read(__p_ident);
    __is->read(__p_DataType);
    __is->read(__p_InstrumentID);
    __is->read(__p_starttime);
    __is->read(__p_endtime);
    __inS.endReadParams();
    ::std::string __ret = queryData(__p_ident, __p_DataType, __p_InstrumentID, __p_starttime, __p_endtime, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
MdPast::MdSession::___queryInstruments(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::MdPast::StringList __p_symbols;
    ::MdPast::StringList __p_products;
    ::MdPast::StringList __p_exchanges;
    ::MdPast::IntList __p_rank;
    ::MdPast::StringList __p_productclass;
    ::MdPast::IntList __p_istrading;
    __is->read(__p_symbols);
    __is->read(__p_products);
    __is->read(__p_exchanges);
    __is->read(__p_rank);
    __is->read(__p_productclass);
    __is->read(__p_istrading);
    __inS.endReadParams();
    ::std::string __ret = queryInstruments(__p_symbols, __p_products, __p_exchanges, __p_rank, __p_productclass, __p_istrading, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __MdPast__MdSession_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "queryData",
    "queryInstruments"
};

}

::Ice::DispatchStatus
MdPast::MdSession::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__MdPast__MdSession_all, __MdPast__MdSession_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __MdPast__MdSession_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___queryData(in, current);
        }
        case 5:
        {
            return ___queryInstruments(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
MdPast::MdSession::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
MdPast::MdSession::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
MdPast::__patch(MdSessionPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::MdPast::MdSessionPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::MdPast::MdSession::ice_staticId(), v);
    }
}
