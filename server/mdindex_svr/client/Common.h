// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `Common.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Common_h__
#define __Common_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

namespace CM
{

struct Ticker
{
    ::Ice::Long Timestamp;
    ::Ice::Double Price;
    ::Ice::Int Volume;
    ::Ice::Double Turnover;
    ::Ice::Double OpenInterest;
    ::Ice::Double TotalVolume;
    ::Ice::Double TotalTurnover;
    ::Ice::Double BidPrice1;
    ::Ice::Double AskPrice1;
    ::Ice::Int BidVolume1;
    ::Ice::Int AskVolume1;
};

struct Bar
{
    ::Ice::Long Timestamp;
    ::Ice::Double High;
    ::Ice::Double Low;
    ::Ice::Double Open;
    ::Ice::Double Close;
    ::Ice::Int Volume;
    ::Ice::Double Turnover;
};

struct DayBar
{
    ::Ice::Long Timestamp;
    ::Ice::Double High;
    ::Ice::Double Low;
    ::Ice::Double Open;
    ::Ice::Double Close;
    ::Ice::Double Average;
    ::Ice::Int Volume;
    ::Ice::Double Turnover;
    ::Ice::Double Settlement;
    ::Ice::Double PreSettlement;
    ::Ice::Double PreClose;
    ::Ice::Double PreoOpenInterest;
};

struct Done
{
    ::std::string tradingday;
    ::std::string fundid;
    ::std::string requestid;
    ::std::string brokerid;
    ::std::string orderid;
    ::std::string tradeid;
    ::std::string exchangeid;
    ::std::string instrumentid;
    ::std::string direction;
    ::std::string offsetflag;
    ::std::string hedgeflag;
    ::Ice::Double price;
    ::Ice::Int volume;
    ::std::string tradedate;
    ::std::string tradetime;
    ::std::string updatedate;
};

struct Account
{
    ::std::string tradingday;
    ::std::string fundid;
    ::std::string brokerid;
    ::Ice::Double prebalance;
    ::Ice::Double premargin;
    ::std::string requestid;
    ::std::string tradeid;
    ::Ice::Double balance;
    ::Ice::Double available;
    ::Ice::Double margin;
    ::Ice::Double incap;
    ::Ice::Double outcap;
    ::Ice::Double opencommission;
    ::Ice::Double closecommission;
    ::Ice::Double closeprofit;
    ::Ice::Double positionprofit;
    ::Ice::Double totalprofile;
    ::std::string updatedate;
};

struct Position
{
    ::std::string tradingday;
    ::std::string fundid;
    ::std::string brokerid;
    ::std::string requestid;
    ::std::string tradeid;
    ::std::string instrumentid;
    ::std::string direction;
    ::std::string hedgeflag;
    ::Ice::Int preposition;
    ::Ice::Int preholdposition;
    ::Ice::Int position;
    ::Ice::Int openvolume;
    ::Ice::Int closevolume;
    ::Ice::Double openamount;
    ::Ice::Double closeamount;
    ::Ice::Double opencost;
    ::Ice::Double positioncost;
    ::Ice::Double premargin;
    ::Ice::Double margin;
    ::Ice::Double opencommission;
    ::Ice::Double closecommission;
    ::Ice::Double closeprofit;
    ::Ice::Double positionprofit;
    ::Ice::Double totalprofile;
    ::std::string updatedate;
};

struct Order
{
    ::std::string orderid;

    bool operator==(const Order& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(orderid != __rhs.orderid)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Order& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(orderid < __rhs.orderid)
        {
            return true;
        }
        else if(__rhs.orderid < orderid)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Order& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const Order& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const Order& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const Order& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::CM::Done> DoneList;

typedef ::std::vector< ::CM::Account> AccountList;

typedef ::std::vector< ::CM::Position> PositionList;

typedef ::std::vector< ::CM::Order> OrderList;

}

namespace Ice
{
template<>
struct StreamableTraits< ::CM::Ticker>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 76;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::CM::Ticker, S>
{
    static void write(S* __os, const ::CM::Ticker& v)
    {
        __os->write(v.Timestamp);
        __os->write(v.Price);
        __os->write(v.Volume);
        __os->write(v.Turnover);
        __os->write(v.OpenInterest);
        __os->write(v.TotalVolume);
        __os->write(v.TotalTurnover);
        __os->write(v.BidPrice1);
        __os->write(v.AskPrice1);
        __os->write(v.BidVolume1);
        __os->write(v.AskVolume1);
    }
};

template<class S>
struct StreamReader< ::CM::Ticker, S>
{
    static void read(S* __is, ::CM::Ticker& v)
    {
        __is->read(v.Timestamp);
        __is->read(v.Price);
        __is->read(v.Volume);
        __is->read(v.Turnover);
        __is->read(v.OpenInterest);
        __is->read(v.TotalVolume);
        __is->read(v.TotalTurnover);
        __is->read(v.BidPrice1);
        __is->read(v.AskPrice1);
        __is->read(v.BidVolume1);
        __is->read(v.AskVolume1);
    }
};

template<>
struct StreamableTraits< ::CM::Bar>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 52;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::CM::Bar, S>
{
    static void write(S* __os, const ::CM::Bar& v)
    {
        __os->write(v.Timestamp);
        __os->write(v.High);
        __os->write(v.Low);
        __os->write(v.Open);
        __os->write(v.Close);
        __os->write(v.Volume);
        __os->write(v.Turnover);
    }
};

template<class S>
struct StreamReader< ::CM::Bar, S>
{
    static void read(S* __is, ::CM::Bar& v)
    {
        __is->read(v.Timestamp);
        __is->read(v.High);
        __is->read(v.Low);
        __is->read(v.Open);
        __is->read(v.Close);
        __is->read(v.Volume);
        __is->read(v.Turnover);
    }
};

template<>
struct StreamableTraits< ::CM::DayBar>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 92;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::CM::DayBar, S>
{
    static void write(S* __os, const ::CM::DayBar& v)
    {
        __os->write(v.Timestamp);
        __os->write(v.High);
        __os->write(v.Low);
        __os->write(v.Open);
        __os->write(v.Close);
        __os->write(v.Average);
        __os->write(v.Volume);
        __os->write(v.Turnover);
        __os->write(v.Settlement);
        __os->write(v.PreSettlement);
        __os->write(v.PreClose);
        __os->write(v.PreoOpenInterest);
    }
};

template<class S>
struct StreamReader< ::CM::DayBar, S>
{
    static void read(S* __is, ::CM::DayBar& v)
    {
        __is->read(v.Timestamp);
        __is->read(v.High);
        __is->read(v.Low);
        __is->read(v.Open);
        __is->read(v.Close);
        __is->read(v.Average);
        __is->read(v.Volume);
        __is->read(v.Turnover);
        __is->read(v.Settlement);
        __is->read(v.PreSettlement);
        __is->read(v.PreClose);
        __is->read(v.PreoOpenInterest);
    }
};

template<>
struct StreamableTraits< ::CM::Done>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 26;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::CM::Done, S>
{
    static void write(S* __os, const ::CM::Done& v)
    {
        __os->write(v.tradingday);
        __os->write(v.fundid);
        __os->write(v.requestid);
        __os->write(v.brokerid);
        __os->write(v.orderid);
        __os->write(v.tradeid);
        __os->write(v.exchangeid);
        __os->write(v.instrumentid);
        __os->write(v.direction);
        __os->write(v.offsetflag);
        __os->write(v.hedgeflag);
        __os->write(v.price);
        __os->write(v.volume);
        __os->write(v.tradedate);
        __os->write(v.tradetime);
        __os->write(v.updatedate);
    }
};

template<class S>
struct StreamReader< ::CM::Done, S>
{
    static void read(S* __is, ::CM::Done& v)
    {
        __is->read(v.tradingday);
        __is->read(v.fundid);
        __is->read(v.requestid);
        __is->read(v.brokerid);
        __is->read(v.orderid);
        __is->read(v.tradeid);
        __is->read(v.exchangeid);
        __is->read(v.instrumentid);
        __is->read(v.direction);
        __is->read(v.offsetflag);
        __is->read(v.hedgeflag);
        __is->read(v.price);
        __is->read(v.volume);
        __is->read(v.tradedate);
        __is->read(v.tradetime);
        __is->read(v.updatedate);
    }
};

template<>
struct StreamableTraits< ::CM::Account>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 102;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::CM::Account, S>
{
    static void write(S* __os, const ::CM::Account& v)
    {
        __os->write(v.tradingday);
        __os->write(v.fundid);
        __os->write(v.brokerid);
        __os->write(v.prebalance);
        __os->write(v.premargin);
        __os->write(v.requestid);
        __os->write(v.tradeid);
        __os->write(v.balance);
        __os->write(v.available);
        __os->write(v.margin);
        __os->write(v.incap);
        __os->write(v.outcap);
        __os->write(v.opencommission);
        __os->write(v.closecommission);
        __os->write(v.closeprofit);
        __os->write(v.positionprofit);
        __os->write(v.totalprofile);
        __os->write(v.updatedate);
    }
};

template<class S>
struct StreamReader< ::CM::Account, S>
{
    static void read(S* __is, ::CM::Account& v)
    {
        __is->read(v.tradingday);
        __is->read(v.fundid);
        __is->read(v.brokerid);
        __is->read(v.prebalance);
        __is->read(v.premargin);
        __is->read(v.requestid);
        __is->read(v.tradeid);
        __is->read(v.balance);
        __is->read(v.available);
        __is->read(v.margin);
        __is->read(v.incap);
        __is->read(v.outcap);
        __is->read(v.opencommission);
        __is->read(v.closecommission);
        __is->read(v.closeprofit);
        __is->read(v.positionprofit);
        __is->read(v.totalprofile);
        __is->read(v.updatedate);
    }
};

template<>
struct StreamableTraits< ::CM::Position>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 117;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::CM::Position, S>
{
    static void write(S* __os, const ::CM::Position& v)
    {
        __os->write(v.tradingday);
        __os->write(v.fundid);
        __os->write(v.brokerid);
        __os->write(v.requestid);
        __os->write(v.tradeid);
        __os->write(v.instrumentid);
        __os->write(v.direction);
        __os->write(v.hedgeflag);
        __os->write(v.preposition);
        __os->write(v.preholdposition);
        __os->write(v.position);
        __os->write(v.openvolume);
        __os->write(v.closevolume);
        __os->write(v.openamount);
        __os->write(v.closeamount);
        __os->write(v.opencost);
        __os->write(v.positioncost);
        __os->write(v.premargin);
        __os->write(v.margin);
        __os->write(v.opencommission);
        __os->write(v.closecommission);
        __os->write(v.closeprofit);
        __os->write(v.positionprofit);
        __os->write(v.totalprofile);
        __os->write(v.updatedate);
    }
};

template<class S>
struct StreamReader< ::CM::Position, S>
{
    static void read(S* __is, ::CM::Position& v)
    {
        __is->read(v.tradingday);
        __is->read(v.fundid);
        __is->read(v.brokerid);
        __is->read(v.requestid);
        __is->read(v.tradeid);
        __is->read(v.instrumentid);
        __is->read(v.direction);
        __is->read(v.hedgeflag);
        __is->read(v.preposition);
        __is->read(v.preholdposition);
        __is->read(v.position);
        __is->read(v.openvolume);
        __is->read(v.closevolume);
        __is->read(v.openamount);
        __is->read(v.closeamount);
        __is->read(v.opencost);
        __is->read(v.positioncost);
        __is->read(v.premargin);
        __is->read(v.margin);
        __is->read(v.opencommission);
        __is->read(v.closecommission);
        __is->read(v.closeprofit);
        __is->read(v.positionprofit);
        __is->read(v.totalprofile);
        __is->read(v.updatedate);
    }
};

template<>
struct StreamableTraits< ::CM::Order>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::CM::Order, S>
{
    static void write(S* __os, const ::CM::Order& v)
    {
        __os->write(v.orderid);
    }
};

template<class S>
struct StreamReader< ::CM::Order, S>
{
    static void read(S* __is, ::CM::Order& v)
    {
        __is->read(v.orderid);
    }
};

}

#include <IceUtil/PopDisableWarnings.h>
#endif
