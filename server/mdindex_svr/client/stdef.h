// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `stdef.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __stdef_h__
#define __stdef_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

namespace psd
{

struct Ticker
{
    ::Ice::Long Timestamp;
    ::Ice::Double Price;
    ::Ice::Int Volume;
    ::Ice::Double Turnover;
    ::Ice::Double OpenInterest;
    ::Ice::Double TotalVolume;
    ::Ice::Double TotalTurnover;
    ::Ice::Double BidPrice1;
    ::Ice::Double AskPrice1;
    ::Ice::Int BidVolume1;
    ::Ice::Int AskVolume1;
};

struct Bar
{
    ::Ice::Long Timestamp;
    ::Ice::Double High;
    ::Ice::Double Low;
    ::Ice::Double Open;
    ::Ice::Double Close;
    ::Ice::Int Volume;
    ::Ice::Double Turnover;
};

struct DayBar
{
    ::Ice::Long Timestamp;
    ::Ice::Double High;
    ::Ice::Double Low;
    ::Ice::Double Open;
    ::Ice::Double Close;
    ::Ice::Double Average;
    ::Ice::Int Volume;
    ::Ice::Double Turnover;
    ::Ice::Double Settlement;
    ::Ice::Double PreSettlement;
    ::Ice::Double PreClose;
    ::Ice::Double PreoOpenInterest;
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::psd::Ticker>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 76;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::psd::Ticker, S>
{
    static void write(S* __os, const ::psd::Ticker& v)
    {
        __os->write(v.Timestamp);
        __os->write(v.Price);
        __os->write(v.Volume);
        __os->write(v.Turnover);
        __os->write(v.OpenInterest);
        __os->write(v.TotalVolume);
        __os->write(v.TotalTurnover);
        __os->write(v.BidPrice1);
        __os->write(v.AskPrice1);
        __os->write(v.BidVolume1);
        __os->write(v.AskVolume1);
    }
};

template<class S>
struct StreamReader< ::psd::Ticker, S>
{
    static void read(S* __is, ::psd::Ticker& v)
    {
        __is->read(v.Timestamp);
        __is->read(v.Price);
        __is->read(v.Volume);
        __is->read(v.Turnover);
        __is->read(v.OpenInterest);
        __is->read(v.TotalVolume);
        __is->read(v.TotalTurnover);
        __is->read(v.BidPrice1);
        __is->read(v.AskPrice1);
        __is->read(v.BidVolume1);
        __is->read(v.AskVolume1);
    }
};

template<>
struct StreamableTraits< ::psd::Bar>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 52;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::psd::Bar, S>
{
    static void write(S* __os, const ::psd::Bar& v)
    {
        __os->write(v.Timestamp);
        __os->write(v.High);
        __os->write(v.Low);
        __os->write(v.Open);
        __os->write(v.Close);
        __os->write(v.Volume);
        __os->write(v.Turnover);
    }
};

template<class S>
struct StreamReader< ::psd::Bar, S>
{
    static void read(S* __is, ::psd::Bar& v)
    {
        __is->read(v.Timestamp);
        __is->read(v.High);
        __is->read(v.Low);
        __is->read(v.Open);
        __is->read(v.Close);
        __is->read(v.Volume);
        __is->read(v.Turnover);
    }
};

template<>
struct StreamableTraits< ::psd::DayBar>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 92;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::psd::DayBar, S>
{
    static void write(S* __os, const ::psd::DayBar& v)
    {
        __os->write(v.Timestamp);
        __os->write(v.High);
        __os->write(v.Low);
        __os->write(v.Open);
        __os->write(v.Close);
        __os->write(v.Average);
        __os->write(v.Volume);
        __os->write(v.Turnover);
        __os->write(v.Settlement);
        __os->write(v.PreSettlement);
        __os->write(v.PreClose);
        __os->write(v.PreoOpenInterest);
    }
};

template<class S>
struct StreamReader< ::psd::DayBar, S>
{
    static void read(S* __is, ::psd::DayBar& v)
    {
        __is->read(v.Timestamp);
        __is->read(v.High);
        __is->read(v.Low);
        __is->read(v.Open);
        __is->read(v.Close);
        __is->read(v.Average);
        __is->read(v.Volume);
        __is->read(v.Turnover);
        __is->read(v.Settlement);
        __is->read(v.PreSettlement);
        __is->read(v.PreClose);
        __is->read(v.PreoOpenInterest);
    }
};

}

#include <IceUtil/PopDisableWarnings.h>
#endif
