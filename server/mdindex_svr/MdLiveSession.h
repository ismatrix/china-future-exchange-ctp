// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.2
//
// <auto-generated>
//
// Generated from file `MdLiveSession.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __MdLiveSession_h__
#define __MdLiveSession_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/Identity.h>
#include <ice/Common.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace MdLive
{

class MdSessionCallBack;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::MdLive::MdSessionCallBack>&);
::IceProxy::Ice::Object* upCast(::IceProxy::MdLive::MdSessionCallBack*);

class MdSession;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::MdLive::MdSession>&);
::IceProxy::Ice::Object* upCast(::IceProxy::MdLive::MdSession*);

}

}

namespace MdLive
{

class MdSessionCallBack;
::Ice::Object* upCast(::MdLive::MdSessionCallBack*);
typedef ::IceInternal::Handle< ::MdLive::MdSessionCallBack> MdSessionCallBackPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::MdLive::MdSessionCallBack> MdSessionCallBackPrx;
void __patch(MdSessionCallBackPtr&, const ::Ice::ObjectPtr&);

class MdSession;
::Ice::Object* upCast(::MdLive::MdSession*);
typedef ::IceInternal::Handle< ::MdLive::MdSession> MdSessionPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::MdLive::MdSession> MdSessionPrx;
void __patch(MdSessionPtr&, const ::Ice::ObjectPtr&);

}

namespace MdLive
{

class Callback_MdSessionCallBack_onTick_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MdSessionCallBack_onTick_Base> Callback_MdSessionCallBack_onTickPtr;

class Callback_MdSessionCallBack_onBar_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MdSessionCallBack_onBar_Base> Callback_MdSessionCallBack_onBarPtr;

class Callback_MdSessionCallBack_onDay_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MdSessionCallBack_onDay_Base> Callback_MdSessionCallBack_onDayPtr;

class Callback_MdSessionCallBack_onDepthMarketData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MdSessionCallBack_onDepthMarketData_Base> Callback_MdSessionCallBack_onDepthMarketDataPtr;

class Callback_MdSession_setCallBack_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MdSession_setCallBack_Base> Callback_MdSession_setCallBackPtr;

class Callback_MdSession_heartBeat_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MdSession_heartBeat_Base> Callback_MdSession_heartBeatPtr;

class Callback_MdSession_subscribeMd_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MdSession_subscribeMd_Base> Callback_MdSession_subscribeMdPtr;

class Callback_MdSession_unSubscribeMd_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MdSession_unSubscribeMd_Base> Callback_MdSession_unSubscribeMdPtr;

class Callback_MdSession_sendBar_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MdSession_sendBar_Base> Callback_MdSession_sendBarPtr;

class Callback_MdSession_sendDayBar_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MdSession_sendDayBar_Base> Callback_MdSession_sendDayBarPtr;

class Callback_MdSession_sendTicker_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MdSession_sendTicker_Base> Callback_MdSession_sendTickerPtr;

class Callback_MdSession_QuerySession_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MdSession_QuerySession_Base> Callback_MdSession_QuerySessionPtr;

class Callback_MdSession_QuerySubCurrent_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MdSession_QuerySubCurrent_Base> Callback_MdSession_QuerySubCurrentPtr;

class Callback_MdSession_QueryTicker_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MdSession_QueryTicker_Base> Callback_MdSession_QueryTickerPtr;

class Callback_MdSession_QueryKline_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MdSession_QueryKline_Base> Callback_MdSession_QueryKlinePtr;

class Callback_MdSession_QuerySnap_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MdSession_QuerySnap_Base> Callback_MdSession_QuerySnapPtr;

}

namespace IceProxy
{

namespace MdLive
{

class MdSessionCallBack : virtual public ::IceProxy::Ice::Object
{
public:

    ::Ice::Int onTick(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Ticker& __p_ticker)
    {
        return onTick(__p_TradingDay, __p_InstrumentID, __p_ticker, 0);
    }
    ::Ice::Int onTick(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Ticker& __p_ticker, const ::Ice::Context& __ctx)
    {
        return onTick(__p_TradingDay, __p_InstrumentID, __p_ticker, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_onTick(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Ticker& __p_ticker, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_onTick(__p_TradingDay, __p_InstrumentID, __p_ticker, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_onTick(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Ticker& __p_ticker, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_onTick(__p_TradingDay, __p_InstrumentID, __p_ticker, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_onTick(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Ticker& __p_ticker, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_onTick(__p_TradingDay, __p_InstrumentID, __p_ticker, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_onTick(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Ticker& __p_ticker, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_onTick(__p_TradingDay, __p_InstrumentID, __p_ticker, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_onTick(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Ticker& __p_ticker, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_onTick(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Ticker& __p_ticker)
    {
        return begin_onTick(__p_TradingDay, __p_InstrumentID, __p_ticker, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_onTick(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Ticker& __p_ticker, const ::Ice::Context& __ctx)
    {
        return begin_onTick(__p_TradingDay, __p_InstrumentID, __p_ticker, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_onTick(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Ticker& __p_ticker, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onTick(__p_TradingDay, __p_InstrumentID, __p_ticker, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onTick(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Ticker& __p_ticker, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onTick(__p_TradingDay, __p_InstrumentID, __p_ticker, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onTick(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Ticker& __p_ticker, const ::MdLive::Callback_MdSessionCallBack_onTickPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onTick(__p_TradingDay, __p_InstrumentID, __p_ticker, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onTick(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Ticker& __p_ticker, const ::Ice::Context& __ctx, const ::MdLive::Callback_MdSessionCallBack_onTickPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onTick(__p_TradingDay, __p_InstrumentID, __p_ticker, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_onTick(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int onTick(const ::std::string&, const ::std::string&, const ::CM::Ticker&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_onTick(const ::std::string&, const ::std::string&, const ::CM::Ticker&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int onBar(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Bar& __p_bar, ::Ice::Int __p_period)
    {
        return onBar(__p_TradingDay, __p_InstrumentID, __p_bar, __p_period, 0);
    }
    ::Ice::Int onBar(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Bar& __p_bar, ::Ice::Int __p_period, const ::Ice::Context& __ctx)
    {
        return onBar(__p_TradingDay, __p_InstrumentID, __p_bar, __p_period, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_onBar(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Bar& __p_bar, ::Ice::Int __p_period, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_onBar(__p_TradingDay, __p_InstrumentID, __p_bar, __p_period, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_onBar(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Bar& __p_bar, ::Ice::Int __p_period, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_onBar(__p_TradingDay, __p_InstrumentID, __p_bar, __p_period, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_onBar(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Bar& __p_bar, ::Ice::Int __p_period, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_onBar(__p_TradingDay, __p_InstrumentID, __p_bar, __p_period, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_onBar(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Bar& __p_bar, ::Ice::Int __p_period, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_onBar(__p_TradingDay, __p_InstrumentID, __p_bar, __p_period, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_onBar(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Bar& __p_bar, ::Ice::Int __p_period, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_onBar(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Bar& __p_bar, ::Ice::Int __p_period)
    {
        return begin_onBar(__p_TradingDay, __p_InstrumentID, __p_bar, __p_period, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_onBar(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Bar& __p_bar, ::Ice::Int __p_period, const ::Ice::Context& __ctx)
    {
        return begin_onBar(__p_TradingDay, __p_InstrumentID, __p_bar, __p_period, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_onBar(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Bar& __p_bar, ::Ice::Int __p_period, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onBar(__p_TradingDay, __p_InstrumentID, __p_bar, __p_period, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onBar(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Bar& __p_bar, ::Ice::Int __p_period, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onBar(__p_TradingDay, __p_InstrumentID, __p_bar, __p_period, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onBar(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Bar& __p_bar, ::Ice::Int __p_period, const ::MdLive::Callback_MdSessionCallBack_onBarPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onBar(__p_TradingDay, __p_InstrumentID, __p_bar, __p_period, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onBar(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Bar& __p_bar, ::Ice::Int __p_period, const ::Ice::Context& __ctx, const ::MdLive::Callback_MdSessionCallBack_onBarPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onBar(__p_TradingDay, __p_InstrumentID, __p_bar, __p_period, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_onBar(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int onBar(const ::std::string&, const ::std::string&, const ::CM::Bar&, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_onBar(const ::std::string&, const ::std::string&, const ::CM::Bar&, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int onDay(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::DayBar& __p_day)
    {
        return onDay(__p_TradingDay, __p_InstrumentID, __p_day, 0);
    }
    ::Ice::Int onDay(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::DayBar& __p_day, const ::Ice::Context& __ctx)
    {
        return onDay(__p_TradingDay, __p_InstrumentID, __p_day, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_onDay(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::DayBar& __p_day, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_onDay(__p_TradingDay, __p_InstrumentID, __p_day, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_onDay(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::DayBar& __p_day, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_onDay(__p_TradingDay, __p_InstrumentID, __p_day, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_onDay(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::DayBar& __p_day, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_onDay(__p_TradingDay, __p_InstrumentID, __p_day, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_onDay(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::DayBar& __p_day, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_onDay(__p_TradingDay, __p_InstrumentID, __p_day, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_onDay(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::DayBar& __p_day, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_onDay(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::DayBar& __p_day)
    {
        return begin_onDay(__p_TradingDay, __p_InstrumentID, __p_day, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_onDay(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::DayBar& __p_day, const ::Ice::Context& __ctx)
    {
        return begin_onDay(__p_TradingDay, __p_InstrumentID, __p_day, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_onDay(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::DayBar& __p_day, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onDay(__p_TradingDay, __p_InstrumentID, __p_day, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onDay(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::DayBar& __p_day, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onDay(__p_TradingDay, __p_InstrumentID, __p_day, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onDay(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::DayBar& __p_day, const ::MdLive::Callback_MdSessionCallBack_onDayPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onDay(__p_TradingDay, __p_InstrumentID, __p_day, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onDay(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::DayBar& __p_day, const ::Ice::Context& __ctx, const ::MdLive::Callback_MdSessionCallBack_onDayPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onDay(__p_TradingDay, __p_InstrumentID, __p_day, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_onDay(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int onDay(const ::std::string&, const ::std::string&, const ::CM::DayBar&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_onDay(const ::std::string&, const ::std::string&, const ::CM::DayBar&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void onDepthMarketData(const ::CM::DepthMarketData& __p_mdata)
    {
        onDepthMarketData(__p_mdata, 0);
    }
    void onDepthMarketData(const ::CM::DepthMarketData& __p_mdata, const ::Ice::Context& __ctx)
    {
        onDepthMarketData(__p_mdata, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_onDepthMarketData(const ::CM::DepthMarketData& __p_mdata, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_onDepthMarketData(__p_mdata, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_onDepthMarketData(const ::CM::DepthMarketData& __p_mdata, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_onDepthMarketData(__p_mdata, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_onDepthMarketData(const ::CM::DepthMarketData& __p_mdata, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_onDepthMarketData(__p_mdata, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_onDepthMarketData(const ::CM::DepthMarketData& __p_mdata, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_onDepthMarketData(__p_mdata, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_onDepthMarketData(const ::CM::DepthMarketData& __p_mdata)
    {
        return begin_onDepthMarketData(__p_mdata, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_onDepthMarketData(const ::CM::DepthMarketData& __p_mdata, const ::Ice::Context& __ctx)
    {
        return begin_onDepthMarketData(__p_mdata, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_onDepthMarketData(const ::CM::DepthMarketData& __p_mdata, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onDepthMarketData(__p_mdata, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onDepthMarketData(const ::CM::DepthMarketData& __p_mdata, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onDepthMarketData(__p_mdata, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onDepthMarketData(const ::CM::DepthMarketData& __p_mdata, const ::MdLive::Callback_MdSessionCallBack_onDepthMarketDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onDepthMarketData(__p_mdata, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onDepthMarketData(const ::CM::DepthMarketData& __p_mdata, const ::Ice::Context& __ctx, const ::MdLive::Callback_MdSessionCallBack_onDepthMarketDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onDepthMarketData(__p_mdata, &__ctx, __del, __cookie);
    }

    void end_onDepthMarketData(const ::Ice::AsyncResultPtr&);
    
private:

    void onDepthMarketData(const ::CM::DepthMarketData&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_onDepthMarketData(const ::CM::DepthMarketData&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<MdSessionCallBack> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<MdSessionCallBack*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<MdSessionCallBack> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<MdSessionCallBack*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<MdSessionCallBack> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<MdSessionCallBack*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<MdSessionCallBack> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<MdSessionCallBack*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<MdSessionCallBack> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<MdSessionCallBack*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<MdSessionCallBack> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<MdSessionCallBack*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<MdSessionCallBack> ice_secure(bool __secure) const
    {
        return dynamic_cast<MdSessionCallBack*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<MdSessionCallBack> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<MdSessionCallBack*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<MdSessionCallBack> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<MdSessionCallBack*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<MdSessionCallBack> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<MdSessionCallBack*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<MdSessionCallBack> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<MdSessionCallBack*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<MdSessionCallBack> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<MdSessionCallBack*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<MdSessionCallBack> ice_twoway() const
    {
        return dynamic_cast<MdSessionCallBack*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<MdSessionCallBack> ice_oneway() const
    {
        return dynamic_cast<MdSessionCallBack*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<MdSessionCallBack> ice_batchOneway() const
    {
        return dynamic_cast<MdSessionCallBack*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<MdSessionCallBack> ice_datagram() const
    {
        return dynamic_cast<MdSessionCallBack*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<MdSessionCallBack> ice_batchDatagram() const
    {
        return dynamic_cast<MdSessionCallBack*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<MdSessionCallBack> ice_compress(bool __compress) const
    {
        return dynamic_cast<MdSessionCallBack*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<MdSessionCallBack> ice_timeout(int __timeout) const
    {
        return dynamic_cast<MdSessionCallBack*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<MdSessionCallBack> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<MdSessionCallBack*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<MdSessionCallBack> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<MdSessionCallBack*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class MdSession : virtual public ::IceProxy::Ice::Object
{
public:

    ::Ice::Int setCallBack(const ::Ice::Identity& __p_ident)
    {
        return setCallBack(__p_ident, 0);
    }
    ::Ice::Int setCallBack(const ::Ice::Identity& __p_ident, const ::Ice::Context& __ctx)
    {
        return setCallBack(__p_ident, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setCallBack(const ::Ice::Identity& __p_ident, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setCallBack(__p_ident, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setCallBack(const ::Ice::Identity& __p_ident, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setCallBack(__p_ident, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setCallBack(const ::Ice::Identity& __p_ident, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setCallBack(__p_ident, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setCallBack(const ::Ice::Identity& __p_ident, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setCallBack(__p_ident, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setCallBack(const ::Ice::Identity& __p_ident, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setCallBack(const ::Ice::Identity& __p_ident)
    {
        return begin_setCallBack(__p_ident, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setCallBack(const ::Ice::Identity& __p_ident, const ::Ice::Context& __ctx)
    {
        return begin_setCallBack(__p_ident, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setCallBack(const ::Ice::Identity& __p_ident, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCallBack(__p_ident, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCallBack(const ::Ice::Identity& __p_ident, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCallBack(__p_ident, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCallBack(const ::Ice::Identity& __p_ident, const ::MdLive::Callback_MdSession_setCallBackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCallBack(__p_ident, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCallBack(const ::Ice::Identity& __p_ident, const ::Ice::Context& __ctx, const ::MdLive::Callback_MdSession_setCallBackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCallBack(__p_ident, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_setCallBack(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int setCallBack(const ::Ice::Identity&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setCallBack(const ::Ice::Identity&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int heartBeat()
    {
        return heartBeat(0);
    }
    ::Ice::Int heartBeat(const ::Ice::Context& __ctx)
    {
        return heartBeat(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_heartBeat(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_heartBeat(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_heartBeat(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_heartBeat(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_heartBeat(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_heartBeat(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_heartBeat(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_heartBeat(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_heartBeat(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_heartBeat()
    {
        return begin_heartBeat(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_heartBeat(const ::Ice::Context& __ctx)
    {
        return begin_heartBeat(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_heartBeat(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_heartBeat(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_heartBeat(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_heartBeat(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_heartBeat(const ::MdLive::Callback_MdSession_heartBeatPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_heartBeat(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_heartBeat(const ::Ice::Context& __ctx, const ::MdLive::Callback_MdSession_heartBeatPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_heartBeat(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_heartBeat(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int heartBeat(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_heartBeat(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int subscribeMd(const ::std::string& __p_insid, const ::std::string& __p_level)
    {
        return subscribeMd(__p_insid, __p_level, 0);
    }
    ::Ice::Int subscribeMd(const ::std::string& __p_insid, const ::std::string& __p_level, const ::Ice::Context& __ctx)
    {
        return subscribeMd(__p_insid, __p_level, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_subscribeMd(const ::std::string& __p_insid, const ::std::string& __p_level, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_subscribeMd(__p_insid, __p_level, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_subscribeMd(const ::std::string& __p_insid, const ::std::string& __p_level, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_subscribeMd(__p_insid, __p_level, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_subscribeMd(const ::std::string& __p_insid, const ::std::string& __p_level, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_subscribeMd(__p_insid, __p_level, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_subscribeMd(const ::std::string& __p_insid, const ::std::string& __p_level, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_subscribeMd(__p_insid, __p_level, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_subscribeMd(const ::std::string& __p_insid, const ::std::string& __p_level, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_subscribeMd(const ::std::string& __p_insid, const ::std::string& __p_level)
    {
        return begin_subscribeMd(__p_insid, __p_level, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_subscribeMd(const ::std::string& __p_insid, const ::std::string& __p_level, const ::Ice::Context& __ctx)
    {
        return begin_subscribeMd(__p_insid, __p_level, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_subscribeMd(const ::std::string& __p_insid, const ::std::string& __p_level, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_subscribeMd(__p_insid, __p_level, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_subscribeMd(const ::std::string& __p_insid, const ::std::string& __p_level, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_subscribeMd(__p_insid, __p_level, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_subscribeMd(const ::std::string& __p_insid, const ::std::string& __p_level, const ::MdLive::Callback_MdSession_subscribeMdPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_subscribeMd(__p_insid, __p_level, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_subscribeMd(const ::std::string& __p_insid, const ::std::string& __p_level, const ::Ice::Context& __ctx, const ::MdLive::Callback_MdSession_subscribeMdPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_subscribeMd(__p_insid, __p_level, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_subscribeMd(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int subscribeMd(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_subscribeMd(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int unSubscribeMd(const ::std::string& __p_insid, const ::std::string& __p_level)
    {
        return unSubscribeMd(__p_insid, __p_level, 0);
    }
    ::Ice::Int unSubscribeMd(const ::std::string& __p_insid, const ::std::string& __p_level, const ::Ice::Context& __ctx)
    {
        return unSubscribeMd(__p_insid, __p_level, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unSubscribeMd(const ::std::string& __p_insid, const ::std::string& __p_level, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_unSubscribeMd(__p_insid, __p_level, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_unSubscribeMd(const ::std::string& __p_insid, const ::std::string& __p_level, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unSubscribeMd(__p_insid, __p_level, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unSubscribeMd(const ::std::string& __p_insid, const ::std::string& __p_level, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_unSubscribeMd(__p_insid, __p_level, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_unSubscribeMd(const ::std::string& __p_insid, const ::std::string& __p_level, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unSubscribeMd(__p_insid, __p_level, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_unSubscribeMd(const ::std::string& __p_insid, const ::std::string& __p_level, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_unSubscribeMd(const ::std::string& __p_insid, const ::std::string& __p_level)
    {
        return begin_unSubscribeMd(__p_insid, __p_level, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unSubscribeMd(const ::std::string& __p_insid, const ::std::string& __p_level, const ::Ice::Context& __ctx)
    {
        return begin_unSubscribeMd(__p_insid, __p_level, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unSubscribeMd(const ::std::string& __p_insid, const ::std::string& __p_level, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unSubscribeMd(__p_insid, __p_level, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unSubscribeMd(const ::std::string& __p_insid, const ::std::string& __p_level, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unSubscribeMd(__p_insid, __p_level, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unSubscribeMd(const ::std::string& __p_insid, const ::std::string& __p_level, const ::MdLive::Callback_MdSession_unSubscribeMdPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unSubscribeMd(__p_insid, __p_level, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unSubscribeMd(const ::std::string& __p_insid, const ::std::string& __p_level, const ::Ice::Context& __ctx, const ::MdLive::Callback_MdSession_unSubscribeMdPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unSubscribeMd(__p_insid, __p_level, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_unSubscribeMd(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int unSubscribeMd(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unSubscribeMd(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sendBar(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Bar& __p_bar)
    {
        return sendBar(__p_TradingDay, __p_InstrumentID, __p_bar, 0);
    }
    ::Ice::Int sendBar(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Bar& __p_bar, const ::Ice::Context& __ctx)
    {
        return sendBar(__p_TradingDay, __p_InstrumentID, __p_bar, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sendBar(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Bar& __p_bar, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sendBar(__p_TradingDay, __p_InstrumentID, __p_bar, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sendBar(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Bar& __p_bar, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendBar(__p_TradingDay, __p_InstrumentID, __p_bar, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sendBar(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Bar& __p_bar, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sendBar(__p_TradingDay, __p_InstrumentID, __p_bar, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sendBar(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Bar& __p_bar, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendBar(__p_TradingDay, __p_InstrumentID, __p_bar, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_sendBar(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Bar& __p_bar, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_sendBar(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Bar& __p_bar)
    {
        return begin_sendBar(__p_TradingDay, __p_InstrumentID, __p_bar, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendBar(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Bar& __p_bar, const ::Ice::Context& __ctx)
    {
        return begin_sendBar(__p_TradingDay, __p_InstrumentID, __p_bar, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendBar(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Bar& __p_bar, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendBar(__p_TradingDay, __p_InstrumentID, __p_bar, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendBar(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Bar& __p_bar, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendBar(__p_TradingDay, __p_InstrumentID, __p_bar, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendBar(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Bar& __p_bar, const ::MdLive::Callback_MdSession_sendBarPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendBar(__p_TradingDay, __p_InstrumentID, __p_bar, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendBar(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Bar& __p_bar, const ::Ice::Context& __ctx, const ::MdLive::Callback_MdSession_sendBarPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendBar(__p_TradingDay, __p_InstrumentID, __p_bar, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_sendBar(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sendBar(const ::std::string&, const ::std::string&, const ::CM::Bar&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sendBar(const ::std::string&, const ::std::string&, const ::CM::Bar&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sendDayBar(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::DayBar& __p_day)
    {
        return sendDayBar(__p_TradingDay, __p_InstrumentID, __p_day, 0);
    }
    ::Ice::Int sendDayBar(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::DayBar& __p_day, const ::Ice::Context& __ctx)
    {
        return sendDayBar(__p_TradingDay, __p_InstrumentID, __p_day, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sendDayBar(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::DayBar& __p_day, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sendDayBar(__p_TradingDay, __p_InstrumentID, __p_day, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sendDayBar(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::DayBar& __p_day, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendDayBar(__p_TradingDay, __p_InstrumentID, __p_day, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sendDayBar(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::DayBar& __p_day, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sendDayBar(__p_TradingDay, __p_InstrumentID, __p_day, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sendDayBar(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::DayBar& __p_day, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendDayBar(__p_TradingDay, __p_InstrumentID, __p_day, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_sendDayBar(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::DayBar& __p_day, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_sendDayBar(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::DayBar& __p_day)
    {
        return begin_sendDayBar(__p_TradingDay, __p_InstrumentID, __p_day, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendDayBar(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::DayBar& __p_day, const ::Ice::Context& __ctx)
    {
        return begin_sendDayBar(__p_TradingDay, __p_InstrumentID, __p_day, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendDayBar(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::DayBar& __p_day, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendDayBar(__p_TradingDay, __p_InstrumentID, __p_day, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendDayBar(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::DayBar& __p_day, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendDayBar(__p_TradingDay, __p_InstrumentID, __p_day, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendDayBar(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::DayBar& __p_day, const ::MdLive::Callback_MdSession_sendDayBarPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendDayBar(__p_TradingDay, __p_InstrumentID, __p_day, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendDayBar(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::DayBar& __p_day, const ::Ice::Context& __ctx, const ::MdLive::Callback_MdSession_sendDayBarPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendDayBar(__p_TradingDay, __p_InstrumentID, __p_day, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_sendDayBar(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sendDayBar(const ::std::string&, const ::std::string&, const ::CM::DayBar&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sendDayBar(const ::std::string&, const ::std::string&, const ::CM::DayBar&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sendTicker(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Ticker& __p_ticker)
    {
        return sendTicker(__p_TradingDay, __p_InstrumentID, __p_ticker, 0);
    }
    ::Ice::Int sendTicker(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Ticker& __p_ticker, const ::Ice::Context& __ctx)
    {
        return sendTicker(__p_TradingDay, __p_InstrumentID, __p_ticker, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sendTicker(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Ticker& __p_ticker, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sendTicker(__p_TradingDay, __p_InstrumentID, __p_ticker, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sendTicker(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Ticker& __p_ticker, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendTicker(__p_TradingDay, __p_InstrumentID, __p_ticker, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sendTicker(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Ticker& __p_ticker, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sendTicker(__p_TradingDay, __p_InstrumentID, __p_ticker, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sendTicker(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Ticker& __p_ticker, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendTicker(__p_TradingDay, __p_InstrumentID, __p_ticker, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_sendTicker(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Ticker& __p_ticker, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_sendTicker(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Ticker& __p_ticker)
    {
        return begin_sendTicker(__p_TradingDay, __p_InstrumentID, __p_ticker, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendTicker(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Ticker& __p_ticker, const ::Ice::Context& __ctx)
    {
        return begin_sendTicker(__p_TradingDay, __p_InstrumentID, __p_ticker, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendTicker(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Ticker& __p_ticker, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendTicker(__p_TradingDay, __p_InstrumentID, __p_ticker, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendTicker(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Ticker& __p_ticker, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendTicker(__p_TradingDay, __p_InstrumentID, __p_ticker, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendTicker(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Ticker& __p_ticker, const ::MdLive::Callback_MdSession_sendTickerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendTicker(__p_TradingDay, __p_InstrumentID, __p_ticker, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendTicker(const ::std::string& __p_TradingDay, const ::std::string& __p_InstrumentID, const ::CM::Ticker& __p_ticker, const ::Ice::Context& __ctx, const ::MdLive::Callback_MdSession_sendTickerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendTicker(__p_TradingDay, __p_InstrumentID, __p_ticker, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_sendTicker(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sendTicker(const ::std::string&, const ::std::string&, const ::CM::Ticker&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sendTicker(const ::std::string&, const ::std::string&, const ::CM::Ticker&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string QuerySession()
    {
        return QuerySession(0);
    }
    ::std::string QuerySession(const ::Ice::Context& __ctx)
    {
        return QuerySession(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_QuerySession(const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_QuerySession(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_QuerySession(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_QuerySession(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_QuerySession(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_QuerySession(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_QuerySession(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_QuerySession(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_QuerySession(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_QuerySession()
    {
        return begin_QuerySession(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_QuerySession(const ::Ice::Context& __ctx)
    {
        return begin_QuerySession(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_QuerySession(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QuerySession(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QuerySession(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QuerySession(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QuerySession(const ::MdLive::Callback_MdSession_QuerySessionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QuerySession(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QuerySession(const ::Ice::Context& __ctx, const ::MdLive::Callback_MdSession_QuerySessionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QuerySession(&__ctx, __del, __cookie);
    }

    ::std::string end_QuerySession(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string QuerySession(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_QuerySession(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string QuerySubCurrent()
    {
        return QuerySubCurrent(0);
    }
    ::std::string QuerySubCurrent(const ::Ice::Context& __ctx)
    {
        return QuerySubCurrent(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_QuerySubCurrent(const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_QuerySubCurrent(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_QuerySubCurrent(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_QuerySubCurrent(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_QuerySubCurrent(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_QuerySubCurrent(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_QuerySubCurrent(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_QuerySubCurrent(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_QuerySubCurrent(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_QuerySubCurrent()
    {
        return begin_QuerySubCurrent(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_QuerySubCurrent(const ::Ice::Context& __ctx)
    {
        return begin_QuerySubCurrent(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_QuerySubCurrent(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QuerySubCurrent(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QuerySubCurrent(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QuerySubCurrent(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QuerySubCurrent(const ::MdLive::Callback_MdSession_QuerySubCurrentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QuerySubCurrent(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QuerySubCurrent(const ::Ice::Context& __ctx, const ::MdLive::Callback_MdSession_QuerySubCurrentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QuerySubCurrent(&__ctx, __del, __cookie);
    }

    ::std::string end_QuerySubCurrent(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string QuerySubCurrent(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_QuerySubCurrent(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string QueryTicker(const ::std::string& __p_insid)
    {
        return QueryTicker(__p_insid, 0);
    }
    ::std::string QueryTicker(const ::std::string& __p_insid, const ::Ice::Context& __ctx)
    {
        return QueryTicker(__p_insid, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_QueryTicker(const ::std::string& __p_insid, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_QueryTicker(__p_insid, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_QueryTicker(const ::std::string& __p_insid, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_QueryTicker(__p_insid, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_QueryTicker(const ::std::string& __p_insid, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_QueryTicker(__p_insid, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_QueryTicker(const ::std::string& __p_insid, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_QueryTicker(__p_insid, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_QueryTicker(const ::std::string& __p_insid, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_QueryTicker(const ::std::string& __p_insid)
    {
        return begin_QueryTicker(__p_insid, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_QueryTicker(const ::std::string& __p_insid, const ::Ice::Context& __ctx)
    {
        return begin_QueryTicker(__p_insid, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_QueryTicker(const ::std::string& __p_insid, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QueryTicker(__p_insid, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QueryTicker(const ::std::string& __p_insid, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QueryTicker(__p_insid, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QueryTicker(const ::std::string& __p_insid, const ::MdLive::Callback_MdSession_QueryTickerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QueryTicker(__p_insid, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QueryTicker(const ::std::string& __p_insid, const ::Ice::Context& __ctx, const ::MdLive::Callback_MdSession_QueryTickerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QueryTicker(__p_insid, &__ctx, __del, __cookie);
    }

    ::std::string end_QueryTicker(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string QueryTicker(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_QueryTicker(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string QueryKline(const ::std::string& __p_insid)
    {
        return QueryKline(__p_insid, 0);
    }
    ::std::string QueryKline(const ::std::string& __p_insid, const ::Ice::Context& __ctx)
    {
        return QueryKline(__p_insid, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_QueryKline(const ::std::string& __p_insid, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_QueryKline(__p_insid, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_QueryKline(const ::std::string& __p_insid, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_QueryKline(__p_insid, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_QueryKline(const ::std::string& __p_insid, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_QueryKline(__p_insid, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_QueryKline(const ::std::string& __p_insid, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_QueryKline(__p_insid, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_QueryKline(const ::std::string& __p_insid, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_QueryKline(const ::std::string& __p_insid)
    {
        return begin_QueryKline(__p_insid, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_QueryKline(const ::std::string& __p_insid, const ::Ice::Context& __ctx)
    {
        return begin_QueryKline(__p_insid, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_QueryKline(const ::std::string& __p_insid, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QueryKline(__p_insid, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QueryKline(const ::std::string& __p_insid, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QueryKline(__p_insid, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QueryKline(const ::std::string& __p_insid, const ::MdLive::Callback_MdSession_QueryKlinePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QueryKline(__p_insid, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QueryKline(const ::std::string& __p_insid, const ::Ice::Context& __ctx, const ::MdLive::Callback_MdSession_QueryKlinePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QueryKline(__p_insid, &__ctx, __del, __cookie);
    }

    ::std::string end_QueryKline(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string QueryKline(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_QueryKline(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string QuerySnap(const ::std::string& __p_insid)
    {
        return QuerySnap(__p_insid, 0);
    }
    ::std::string QuerySnap(const ::std::string& __p_insid, const ::Ice::Context& __ctx)
    {
        return QuerySnap(__p_insid, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_QuerySnap(const ::std::string& __p_insid, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_QuerySnap(__p_insid, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_QuerySnap(const ::std::string& __p_insid, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_QuerySnap(__p_insid, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_QuerySnap(const ::std::string& __p_insid, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_QuerySnap(__p_insid, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_QuerySnap(const ::std::string& __p_insid, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_QuerySnap(__p_insid, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_QuerySnap(const ::std::string& __p_insid, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_QuerySnap(const ::std::string& __p_insid)
    {
        return begin_QuerySnap(__p_insid, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_QuerySnap(const ::std::string& __p_insid, const ::Ice::Context& __ctx)
    {
        return begin_QuerySnap(__p_insid, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_QuerySnap(const ::std::string& __p_insid, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QuerySnap(__p_insid, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QuerySnap(const ::std::string& __p_insid, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QuerySnap(__p_insid, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QuerySnap(const ::std::string& __p_insid, const ::MdLive::Callback_MdSession_QuerySnapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QuerySnap(__p_insid, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QuerySnap(const ::std::string& __p_insid, const ::Ice::Context& __ctx, const ::MdLive::Callback_MdSession_QuerySnapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QuerySnap(__p_insid, &__ctx, __del, __cookie);
    }

    ::std::string end_QuerySnap(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string QuerySnap(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_QuerySnap(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<MdSession> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<MdSession*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<MdSession> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<MdSession*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<MdSession> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<MdSession*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<MdSession> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<MdSession*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<MdSession> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<MdSession*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<MdSession> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<MdSession*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<MdSession> ice_secure(bool __secure) const
    {
        return dynamic_cast<MdSession*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<MdSession> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<MdSession*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<MdSession> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<MdSession*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<MdSession> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<MdSession*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<MdSession> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<MdSession*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<MdSession> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<MdSession*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<MdSession> ice_twoway() const
    {
        return dynamic_cast<MdSession*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<MdSession> ice_oneway() const
    {
        return dynamic_cast<MdSession*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<MdSession> ice_batchOneway() const
    {
        return dynamic_cast<MdSession*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<MdSession> ice_datagram() const
    {
        return dynamic_cast<MdSession*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<MdSession> ice_batchDatagram() const
    {
        return dynamic_cast<MdSession*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<MdSession> ice_compress(bool __compress) const
    {
        return dynamic_cast<MdSession*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<MdSession> ice_timeout(int __timeout) const
    {
        return dynamic_cast<MdSession*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<MdSession> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<MdSession*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<MdSession> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<MdSession*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace MdLive
{

class MdSessionCallBack : virtual public ::Ice::Object
{
public:

    typedef MdSessionCallBackPrx ProxyType;
    typedef MdSessionCallBackPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::Int onTick(const ::std::string&, const ::std::string&, const ::CM::Ticker&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___onTick(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int onBar(const ::std::string&, const ::std::string&, const ::CM::Bar&, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___onBar(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int onDay(const ::std::string&, const ::std::string&, const ::CM::DayBar&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___onDay(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void onDepthMarketData(const ::CM::DepthMarketData&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___onDepthMarketData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const MdSessionCallBack& l, const MdSessionCallBack& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const MdSessionCallBack& l, const MdSessionCallBack& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class MdSession : virtual public ::Ice::Object
{
public:

    typedef MdSessionPrx ProxyType;
    typedef MdSessionPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::Int setCallBack(const ::Ice::Identity&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setCallBack(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int heartBeat(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___heartBeat(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int subscribeMd(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___subscribeMd(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int unSubscribeMd(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unSubscribeMd(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sendBar(const ::std::string&, const ::std::string&, const ::CM::Bar&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sendBar(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sendDayBar(const ::std::string&, const ::std::string&, const ::CM::DayBar&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sendDayBar(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sendTicker(const ::std::string&, const ::std::string&, const ::CM::Ticker&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sendTicker(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string QuerySession(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___QuerySession(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string QuerySubCurrent(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___QuerySubCurrent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string QueryTicker(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___QueryTicker(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string QueryKline(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___QueryKline(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string QuerySnap(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___QuerySnap(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const MdSession& l, const MdSession& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const MdSession& l, const MdSession& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace MdLive
{

template<class T>
class CallbackNC_MdSessionCallBack_onTick : public Callback_MdSessionCallBack_onTick_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_MdSessionCallBack_onTick(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MdLive::MdSessionCallBackPrx __proxy = ::MdLive::MdSessionCallBackPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_onTick(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_MdSessionCallBack_onTickPtr
newCallback_MdSessionCallBack_onTick(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MdSessionCallBack_onTick<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MdSessionCallBack_onTickPtr
newCallback_MdSessionCallBack_onTick(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MdSessionCallBack_onTick<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MdSessionCallBack_onTick : public Callback_MdSessionCallBack_onTick_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_MdSessionCallBack_onTick(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MdLive::MdSessionCallBackPrx __proxy = ::MdLive::MdSessionCallBackPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_onTick(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_MdSessionCallBack_onTickPtr
newCallback_MdSessionCallBack_onTick(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MdSessionCallBack_onTick<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MdSessionCallBack_onTickPtr
newCallback_MdSessionCallBack_onTick(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MdSessionCallBack_onTick<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MdSessionCallBack_onBar : public Callback_MdSessionCallBack_onBar_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_MdSessionCallBack_onBar(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MdLive::MdSessionCallBackPrx __proxy = ::MdLive::MdSessionCallBackPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_onBar(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_MdSessionCallBack_onBarPtr
newCallback_MdSessionCallBack_onBar(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MdSessionCallBack_onBar<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MdSessionCallBack_onBarPtr
newCallback_MdSessionCallBack_onBar(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MdSessionCallBack_onBar<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MdSessionCallBack_onBar : public Callback_MdSessionCallBack_onBar_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_MdSessionCallBack_onBar(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MdLive::MdSessionCallBackPrx __proxy = ::MdLive::MdSessionCallBackPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_onBar(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_MdSessionCallBack_onBarPtr
newCallback_MdSessionCallBack_onBar(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MdSessionCallBack_onBar<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MdSessionCallBack_onBarPtr
newCallback_MdSessionCallBack_onBar(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MdSessionCallBack_onBar<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MdSessionCallBack_onDay : public Callback_MdSessionCallBack_onDay_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_MdSessionCallBack_onDay(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MdLive::MdSessionCallBackPrx __proxy = ::MdLive::MdSessionCallBackPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_onDay(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_MdSessionCallBack_onDayPtr
newCallback_MdSessionCallBack_onDay(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MdSessionCallBack_onDay<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MdSessionCallBack_onDayPtr
newCallback_MdSessionCallBack_onDay(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MdSessionCallBack_onDay<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MdSessionCallBack_onDay : public Callback_MdSessionCallBack_onDay_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_MdSessionCallBack_onDay(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MdLive::MdSessionCallBackPrx __proxy = ::MdLive::MdSessionCallBackPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_onDay(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_MdSessionCallBack_onDayPtr
newCallback_MdSessionCallBack_onDay(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MdSessionCallBack_onDay<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MdSessionCallBack_onDayPtr
newCallback_MdSessionCallBack_onDay(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MdSessionCallBack_onDay<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MdSessionCallBack_onDepthMarketData : public Callback_MdSessionCallBack_onDepthMarketData_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_MdSessionCallBack_onDepthMarketData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_MdSessionCallBack_onDepthMarketDataPtr
newCallback_MdSessionCallBack_onDepthMarketData(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MdSessionCallBack_onDepthMarketData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MdSessionCallBack_onDepthMarketDataPtr
newCallback_MdSessionCallBack_onDepthMarketData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MdSessionCallBack_onDepthMarketData<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_MdSessionCallBack_onDepthMarketDataPtr
newCallback_MdSessionCallBack_onDepthMarketData(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MdSessionCallBack_onDepthMarketData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MdSessionCallBack_onDepthMarketDataPtr
newCallback_MdSessionCallBack_onDepthMarketData(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MdSessionCallBack_onDepthMarketData<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_MdSessionCallBack_onDepthMarketData : public Callback_MdSessionCallBack_onDepthMarketData_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_MdSessionCallBack_onDepthMarketData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_MdSessionCallBack_onDepthMarketDataPtr
newCallback_MdSessionCallBack_onDepthMarketData(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MdSessionCallBack_onDepthMarketData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MdSessionCallBack_onDepthMarketDataPtr
newCallback_MdSessionCallBack_onDepthMarketData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MdSessionCallBack_onDepthMarketData<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_MdSessionCallBack_onDepthMarketDataPtr
newCallback_MdSessionCallBack_onDepthMarketData(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MdSessionCallBack_onDepthMarketData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MdSessionCallBack_onDepthMarketDataPtr
newCallback_MdSessionCallBack_onDepthMarketData(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MdSessionCallBack_onDepthMarketData<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_MdSession_setCallBack : public Callback_MdSession_setCallBack_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_MdSession_setCallBack(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MdLive::MdSessionPrx __proxy = ::MdLive::MdSessionPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_setCallBack(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_MdSession_setCallBackPtr
newCallback_MdSession_setCallBack(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MdSession_setCallBack<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MdSession_setCallBackPtr
newCallback_MdSession_setCallBack(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MdSession_setCallBack<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MdSession_setCallBack : public Callback_MdSession_setCallBack_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_MdSession_setCallBack(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MdLive::MdSessionPrx __proxy = ::MdLive::MdSessionPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_setCallBack(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_MdSession_setCallBackPtr
newCallback_MdSession_setCallBack(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MdSession_setCallBack<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MdSession_setCallBackPtr
newCallback_MdSession_setCallBack(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MdSession_setCallBack<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MdSession_heartBeat : public Callback_MdSession_heartBeat_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_MdSession_heartBeat(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MdLive::MdSessionPrx __proxy = ::MdLive::MdSessionPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_heartBeat(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_MdSession_heartBeatPtr
newCallback_MdSession_heartBeat(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MdSession_heartBeat<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MdSession_heartBeatPtr
newCallback_MdSession_heartBeat(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MdSession_heartBeat<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MdSession_heartBeat : public Callback_MdSession_heartBeat_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_MdSession_heartBeat(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MdLive::MdSessionPrx __proxy = ::MdLive::MdSessionPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_heartBeat(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_MdSession_heartBeatPtr
newCallback_MdSession_heartBeat(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MdSession_heartBeat<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MdSession_heartBeatPtr
newCallback_MdSession_heartBeat(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MdSession_heartBeat<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MdSession_subscribeMd : public Callback_MdSession_subscribeMd_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_MdSession_subscribeMd(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MdLive::MdSessionPrx __proxy = ::MdLive::MdSessionPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_subscribeMd(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_MdSession_subscribeMdPtr
newCallback_MdSession_subscribeMd(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MdSession_subscribeMd<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MdSession_subscribeMdPtr
newCallback_MdSession_subscribeMd(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MdSession_subscribeMd<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MdSession_subscribeMd : public Callback_MdSession_subscribeMd_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_MdSession_subscribeMd(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MdLive::MdSessionPrx __proxy = ::MdLive::MdSessionPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_subscribeMd(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_MdSession_subscribeMdPtr
newCallback_MdSession_subscribeMd(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MdSession_subscribeMd<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MdSession_subscribeMdPtr
newCallback_MdSession_subscribeMd(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MdSession_subscribeMd<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MdSession_unSubscribeMd : public Callback_MdSession_unSubscribeMd_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_MdSession_unSubscribeMd(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MdLive::MdSessionPrx __proxy = ::MdLive::MdSessionPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_unSubscribeMd(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_MdSession_unSubscribeMdPtr
newCallback_MdSession_unSubscribeMd(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MdSession_unSubscribeMd<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MdSession_unSubscribeMdPtr
newCallback_MdSession_unSubscribeMd(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MdSession_unSubscribeMd<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MdSession_unSubscribeMd : public Callback_MdSession_unSubscribeMd_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_MdSession_unSubscribeMd(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MdLive::MdSessionPrx __proxy = ::MdLive::MdSessionPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_unSubscribeMd(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_MdSession_unSubscribeMdPtr
newCallback_MdSession_unSubscribeMd(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MdSession_unSubscribeMd<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MdSession_unSubscribeMdPtr
newCallback_MdSession_unSubscribeMd(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MdSession_unSubscribeMd<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MdSession_sendBar : public Callback_MdSession_sendBar_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_MdSession_sendBar(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MdLive::MdSessionPrx __proxy = ::MdLive::MdSessionPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sendBar(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_MdSession_sendBarPtr
newCallback_MdSession_sendBar(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MdSession_sendBar<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MdSession_sendBarPtr
newCallback_MdSession_sendBar(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MdSession_sendBar<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MdSession_sendBar : public Callback_MdSession_sendBar_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_MdSession_sendBar(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MdLive::MdSessionPrx __proxy = ::MdLive::MdSessionPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sendBar(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_MdSession_sendBarPtr
newCallback_MdSession_sendBar(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MdSession_sendBar<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MdSession_sendBarPtr
newCallback_MdSession_sendBar(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MdSession_sendBar<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MdSession_sendDayBar : public Callback_MdSession_sendDayBar_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_MdSession_sendDayBar(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MdLive::MdSessionPrx __proxy = ::MdLive::MdSessionPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sendDayBar(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_MdSession_sendDayBarPtr
newCallback_MdSession_sendDayBar(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MdSession_sendDayBar<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MdSession_sendDayBarPtr
newCallback_MdSession_sendDayBar(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MdSession_sendDayBar<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MdSession_sendDayBar : public Callback_MdSession_sendDayBar_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_MdSession_sendDayBar(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MdLive::MdSessionPrx __proxy = ::MdLive::MdSessionPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sendDayBar(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_MdSession_sendDayBarPtr
newCallback_MdSession_sendDayBar(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MdSession_sendDayBar<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MdSession_sendDayBarPtr
newCallback_MdSession_sendDayBar(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MdSession_sendDayBar<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MdSession_sendTicker : public Callback_MdSession_sendTicker_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_MdSession_sendTicker(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MdLive::MdSessionPrx __proxy = ::MdLive::MdSessionPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sendTicker(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_MdSession_sendTickerPtr
newCallback_MdSession_sendTicker(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MdSession_sendTicker<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MdSession_sendTickerPtr
newCallback_MdSession_sendTicker(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MdSession_sendTicker<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MdSession_sendTicker : public Callback_MdSession_sendTicker_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_MdSession_sendTicker(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MdLive::MdSessionPrx __proxy = ::MdLive::MdSessionPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sendTicker(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_MdSession_sendTickerPtr
newCallback_MdSession_sendTicker(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MdSession_sendTicker<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MdSession_sendTickerPtr
newCallback_MdSession_sendTicker(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MdSession_sendTicker<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MdSession_QuerySession : public Callback_MdSession_QuerySession_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_MdSession_QuerySession(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MdLive::MdSessionPrx __proxy = ::MdLive::MdSessionPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_QuerySession(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_MdSession_QuerySessionPtr
newCallback_MdSession_QuerySession(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MdSession_QuerySession<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MdSession_QuerySessionPtr
newCallback_MdSession_QuerySession(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MdSession_QuerySession<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MdSession_QuerySession : public Callback_MdSession_QuerySession_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_MdSession_QuerySession(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MdLive::MdSessionPrx __proxy = ::MdLive::MdSessionPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_QuerySession(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_MdSession_QuerySessionPtr
newCallback_MdSession_QuerySession(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MdSession_QuerySession<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MdSession_QuerySessionPtr
newCallback_MdSession_QuerySession(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MdSession_QuerySession<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MdSession_QuerySubCurrent : public Callback_MdSession_QuerySubCurrent_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_MdSession_QuerySubCurrent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MdLive::MdSessionPrx __proxy = ::MdLive::MdSessionPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_QuerySubCurrent(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_MdSession_QuerySubCurrentPtr
newCallback_MdSession_QuerySubCurrent(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MdSession_QuerySubCurrent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MdSession_QuerySubCurrentPtr
newCallback_MdSession_QuerySubCurrent(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MdSession_QuerySubCurrent<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MdSession_QuerySubCurrent : public Callback_MdSession_QuerySubCurrent_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_MdSession_QuerySubCurrent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MdLive::MdSessionPrx __proxy = ::MdLive::MdSessionPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_QuerySubCurrent(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_MdSession_QuerySubCurrentPtr
newCallback_MdSession_QuerySubCurrent(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MdSession_QuerySubCurrent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MdSession_QuerySubCurrentPtr
newCallback_MdSession_QuerySubCurrent(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MdSession_QuerySubCurrent<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MdSession_QueryTicker : public Callback_MdSession_QueryTicker_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_MdSession_QueryTicker(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MdLive::MdSessionPrx __proxy = ::MdLive::MdSessionPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_QueryTicker(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_MdSession_QueryTickerPtr
newCallback_MdSession_QueryTicker(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MdSession_QueryTicker<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MdSession_QueryTickerPtr
newCallback_MdSession_QueryTicker(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MdSession_QueryTicker<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MdSession_QueryTicker : public Callback_MdSession_QueryTicker_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_MdSession_QueryTicker(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MdLive::MdSessionPrx __proxy = ::MdLive::MdSessionPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_QueryTicker(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_MdSession_QueryTickerPtr
newCallback_MdSession_QueryTicker(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MdSession_QueryTicker<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MdSession_QueryTickerPtr
newCallback_MdSession_QueryTicker(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MdSession_QueryTicker<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MdSession_QueryKline : public Callback_MdSession_QueryKline_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_MdSession_QueryKline(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MdLive::MdSessionPrx __proxy = ::MdLive::MdSessionPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_QueryKline(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_MdSession_QueryKlinePtr
newCallback_MdSession_QueryKline(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MdSession_QueryKline<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MdSession_QueryKlinePtr
newCallback_MdSession_QueryKline(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MdSession_QueryKline<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MdSession_QueryKline : public Callback_MdSession_QueryKline_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_MdSession_QueryKline(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MdLive::MdSessionPrx __proxy = ::MdLive::MdSessionPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_QueryKline(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_MdSession_QueryKlinePtr
newCallback_MdSession_QueryKline(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MdSession_QueryKline<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MdSession_QueryKlinePtr
newCallback_MdSession_QueryKline(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MdSession_QueryKline<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MdSession_QuerySnap : public Callback_MdSession_QuerySnap_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_MdSession_QuerySnap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MdLive::MdSessionPrx __proxy = ::MdLive::MdSessionPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_QuerySnap(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_MdSession_QuerySnapPtr
newCallback_MdSession_QuerySnap(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MdSession_QuerySnap<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MdSession_QuerySnapPtr
newCallback_MdSession_QuerySnap(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MdSession_QuerySnap<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MdSession_QuerySnap : public Callback_MdSession_QuerySnap_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_MdSession_QuerySnap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MdLive::MdSessionPrx __proxy = ::MdLive::MdSessionPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_QuerySnap(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_MdSession_QuerySnapPtr
newCallback_MdSession_QuerySnap(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MdSession_QuerySnap<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MdSession_QuerySnapPtr
newCallback_MdSession_QuerySnap(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MdSession_QuerySnap<T, CT>(instance, cb, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif
