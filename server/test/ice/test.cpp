// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <test.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __Test__TT__push_name = "push";

}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::TT* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::TT>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::TT;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::Test::TT::push(const ::Test::TType& __p_t, const ::Test::MapType& __p_tt, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __Test__TT__push_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_t);
        __os->write(__p_tt);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::Test::TT::begin_push(const ::Test::TType& __p_t, const ::Test::MapType& __p_tt, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__TT__push_name, __del, __cookie);
    try
    {
        __result->prepare(__Test__TT__push_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_t);
        __os->write(__p_tt);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::Test::TT::end_push(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Test__TT__push_name);
}

const ::std::string&
IceProxy::Test::TT::ice_staticId()
{
    return ::Test::TT::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::Test::TT::__newInstance() const
{
    return new TT;
}

::Ice::Object* Test::upCast(::Test::TT* p) { return p; }

namespace
{
const ::std::string __Test__TT_ids[2] =
{
    "::Ice::Object",
    "::Test::TT"
};

}

bool
Test::TT::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__TT_ids, __Test__TT_ids + 2, _s);
}

::std::vector< ::std::string>
Test::TT::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__TT_ids[0], &__Test__TT_ids[2]);
}

const ::std::string&
Test::TT::ice_id(const ::Ice::Current&) const
{
    return __Test__TT_ids[1];
}

const ::std::string&
Test::TT::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Test::TT";
    return typeId;
#else
    return __Test__TT_ids[1];
#endif
}

::Ice::DispatchStatus
Test::TT::___push(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::TType __p_t;
    ::Test::MapType __p_tt;
    __is->read(__p_t);
    __is->read(__p_tt);
    __inS.endReadParams();
    push(__p_t, __p_tt, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Test__TT_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "push"
};

}

::Ice::DispatchStatus
Test::TT::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Test__TT_all, __Test__TT_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Test__TT_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___push(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Test::TT::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Test::TT::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Test::__patch(TTPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::TTPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::TT::ice_staticId(), v);
    }
}
