#include <iostream>
#include <stdio.h>
#include <stdint.h>
#include <inttypes.h>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <time.h>
#include <assert.h>
#include <openssl/aes.h>

using namespace std;


std::string EncodeAES( const std::string& password, const std::string& data )
{
	AES_KEY aes_key;
	if(AES_set_encrypt_key((const unsigned char*)password.c_str(), password.length() * 8, &aes_key) < 0)
	{
		assert(false);
		return "";
	}
	std::string strRet;
	std::string data_bak = data;
	unsigned int data_length = data_bak.length();
	int padding = 0;
	if (data_bak.length() % AES_BLOCK_SIZE > 0)
	{
		padding =  AES_BLOCK_SIZE - data_bak.length() % AES_BLOCK_SIZE;
	}
	data_length += padding;
	while (padding > 0)
	{
		data_bak += '\0';
		padding--;
	}
	for(unsigned int i = 0; i < data_length/AES_BLOCK_SIZE; i++)
	{
		std::string str16 = data_bak.substr(i*AES_BLOCK_SIZE, AES_BLOCK_SIZE);
		unsigned char out[AES_BLOCK_SIZE];
		::memset(out, 0, AES_BLOCK_SIZE);
		AES_encrypt((const unsigned char*)str16.c_str(), out, &aes_key);

		for(int j=0; j<sizeof(out); j++)
		{
			printf("%02x ",out[j]);
		}
		puts(out);
		strRet += std::string((const char*)out, AES_BLOCK_SIZE);
	}
	printf("\n");
	return strRet;
}

std::string DecodeAES( const std::string& strPassword, const std::string& strData )
{
	AES_KEY aes_key;
	if(AES_set_decrypt_key((const unsigned char*)strPassword.c_str(), strPassword.length() * 8, &aes_key) < 0)
	{
		assert(false);
		return "";
	}
	std::string strRet;
	for(unsigned int i = 0; i < strData.length()/AES_BLOCK_SIZE; i++)
	{
		std::string str16 = strData.substr(i*AES_BLOCK_SIZE, AES_BLOCK_SIZE);
		unsigned char out[AES_BLOCK_SIZE];
		::memset(out, 0, AES_BLOCK_SIZE);
		AES_decrypt((const unsigned char*)str16.c_str(), out, &aes_key);
		strRet += std::string((const char*)out, AES_BLOCK_SIZE);
	}
	return strRet;
}



int main(int argc, char* argv[]) 
{

	AES_KEY key;
	unsigned char plain[]="0123456789abcdef",cipher[64];
	int n;
	AES_set_encrypt_key("0123456789abcdef", 128, &key);
	AES_ecb_encrypt(plain, cipher, &key,AES_ENCRYPT);
	for(n=0;n<64;n++) printf("%02x ",cipher[n]);
	puts("");
	puts(cipher);
	for(n=0;n<16;n++) printf("%02x ",plain[n]);


	return 0;

	if(argc < 3)
	{
		printf("%s decode  pwd string\n", argv[0]);
		return 0;
	}
	string password = argv[2];
	string data = argv[3];
	string outdata = "";

	cout << "password : " << password << endl;
	cout << "data : " << data << endl;

	if(string(argv[1]) == "decode")
	{
		outdata = DecodeAES( password, data );
	}
	else
	{
		outdata = EncodeAES( password,  data );
	}

	cout << "outdata : " << data << endl;

	return 0;       
}                           


